<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>爱捣鼓的小木水的博客</title><link>https://blog.mymaskking.dpdns.org/</link><description>一个等着裁员的java程序猿，每天无所事事，只想搞钱，喜欢钻研各种实用的技能，讨厌天天做工作上的项目，对自己毫无实用价值。&lt;BR/&gt;&lt;div class='listLabels'&gt;&lt;span class='Label LabelName'style='background-color:#efe1e1'&gt;&lt;object&gt;&lt;a style='color:#000000'href='https://v.douyin.com/UFXv95UxBbQ/'data-click-setup='true'&gt;抖音&lt;/a&gt;&lt;/object&gt;&lt;/span&gt;&lt;span class='Label LabelName'style='background-color:#a2eeef'&gt;&lt;object&gt;&lt;a style='color:#fff'href='https://kdocs.cn/l/clf4xOs5a3Q1'data-click-setup='true'&gt;WPS万能文档&lt;/a&gt;&lt;/object&gt;&lt;/span&gt;&lt;span class='Label LabelName'style='background-color:#ff0c0c'&gt;&lt;object&gt;&lt;a style='color:#fff'href='https://www.youtube.com/channel/UCeHFivb01FfFIL7kciY6KFg'data-click-setup='true'&gt;YouTobe&lt;/a&gt;&lt;/object&gt;&lt;/span&gt;&lt;span class='Label LabelTime'style='background-color:#ff4f9a'&gt;&lt;a style='color:#fff'href='https://b23.tv/rGe89DU' data-click-setup='true'&gt;哔哩哔哩&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;</description><copyright>爱捣鼓的小木水的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/41733240?v=4</url><title>avatar</title><link>https://blog.mymaskking.dpdns.org/</link></image><lastBuildDate>Thu, 24 Apr 2025 04:55:30 +0000</lastBuildDate><managingEditor>爱捣鼓的小木水的博客</managingEditor><ttl>60</ttl><webMaster>爱捣鼓的小木水的博客</webMaster><item><title>Gmeek博客搭建：快速搭建更自动化的个人博客</title><link>https://blog.mymaskking.dpdns.org//post/Gmeek-bo-ke-da-jian-%EF%BC%9A-kuai-su-da-jian-geng-zi-dong-hua-de-ge-ren-bo-ke.html</link><description>
# **基于** [**Gmeek**](https://github.com/Meekdai/Gmeek)**的个人博客做了很多改善**

## UI改善

## 增加了其他Markdown编辑的功能

# [Gmeek](https://github.com/Meekdai/Gmeek)的原理流程

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Gmeek博客搭建：快速搭建更自动化的个人博客/img_2b46848a80.png)

# [Gmeek增强](https://github.com/MyMaskKing/MyMaskKing.github.io.git)的原理流程

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Gmeek博客搭建：快速搭建更自动化的个人博客/img_2780839ab1.png)

----------

这个仓库使用 GitHub Action 工作流（`issue-publisher.yml`）将 Markdown 文件自动同步为 GitHub Issues。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/Gmeek-bo-ke-da-jian-%EF%BC%9A-kuai-su-da-jian-geng-zi-dong-hua-de-ge-ren-bo-ke.html</guid><pubDate>Thu, 24 Apr 2025 02:34:26 +0000</pubDate></item><item><title>Hexo博客搭建：第一章（搭建Hexo博客和使用超绝的安知鱼主题！！！）</title><link>https://blog.mymaskking.dpdns.org//post/Hexo-bo-ke-da-jian-%EF%BC%9A-di-yi-zhang-%EF%BC%88-da-jian-Hexo-bo-ke-he-shi-yong-chao-jue-de-an-zhi-yu-zhu-ti-%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%89.html</link><description>&gt; 最开始搭建的Gmeek博客（基于github的issues），后来发现自己git的issues是所有人都可以新建的，这就丧失了个人博客的意义，遂放弃转战其他！  
&gt; ps:自己还拿着cursor吭哧吭哧的做了个性化，各种js注入插件...

# 温馨提示

&gt; **自己的博客发布流程：****WPS云文档--&gt;复制粘贴到stackedit--&gt;自动发布博客（**[**📖博客A**](https://blog.mymaskking.dpdns.org/)**|**[**📖博客B**](https://hexo-blog.mymaskking.dpdns.org/)**）**[**📖博客A**](https://blog.mymaskking.dpdns.org/)**：基于Jmeek（已做UI个性化）**[**📖博客B**](https://hexo-blog.mymaskking.dpdns.org/)**：基于Hexo和anzhiyu主题**

# 官方文档

**安知鱼主题官方文档**:[点我](https://docs.anheyu.com/initall.html)

# Hexo搭建教程

## 安装hexo

```
npm install -g hexo-cli &amp;&amp; hexo -v
```

&gt; `hexo -v`验证是否安装成功

## 初始化 Hexo 项目安装相关依赖

```
可以在你的blog文件夹下直接执行hexo init
也可以：hexo init blog文件夹
cd blog-demo
npm i
```

&gt; **hexo文件夹介绍：****node_modules**：依赖包  
&gt; **scaffolds**：生成文章的一些模板  
&gt; **source**：用来存放你的文章  
&gt; **themes**：主题  
&gt; **.npmignore**：发布时忽略的文件（可忽略）  
&gt; **_config.landscape.yml**：主题的配置文件  
&gt; **config.yml**：博客的配置文件  
&gt; **package.json**：项目名称、描述、版本、运行和开发等信

## 启动hexo

```
注意：命令拼接符Windows用;，Linux用&amp;&amp;
hexo cl ; hexo s
等价于
hexo clean ; hexo start
```

## workflow自动发布到gh-pages分支（我的优化）

&gt; **原理：****1.提交代码后github的workflow自动触发****2.github的page上执行**`**hexo clean;hexo generate**`**3.生成的**`**public**`**自动发布到**`gh-pages`

----------

&gt; **如何使用：**`**gh-pages分支的选择请在Settings--&gt;GitHub Pages--&gt;Build and deployment--&gt;Deploy from branch--&gt;gh-pages分支**`使用gh-pages分支而不是main分支有几个重要原因：  
&gt; 1.代码分离：将源代码（Hexo博客的原始文件）和生成的静态网站分开存储，使仓库结构更加清晰  
&gt; 2.简化版本控制：您只需要跟踪和管理源代码的变化，而不需要关心每次生成的静态文件的变化  
&gt; 3.自动化部署流程：使用GitHub Actions自动构建和部署到单独的分支，减少了手动操作  
&gt; 4.保持源码私密性选择：如果需要，您可以将源码保持私有，同时发布生成的静态网站  
&gt; 5.减少冲突：避免构建过程中生成的文件与源代码发生合并冲突

**workflows源码**

```
name: 部署博客

on:
  # 手动触发
  workflow_dispatch:
  
  # 定时触发
  schedule:
    - cron: '0 2 * * *'  # 每天UTC 2点
  
  # 在同步Markdown工作流完成后触发
  workflow_run:
    workflows: ['同步 Markdown 到博客']
    types:
      - completed
    branches:
      - main

# 权限配置
permissions:
  contents: write

# 并发控制
concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      
      - name: 设置Node环境
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: 安装依赖
        run: |
          npm install -g hexo-cli
          npm install
      
      - name: 构建站点
        run: |
          hexo clean
          hexo generate
      
      - name: 部署到GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          commit_message: '自动部署: ${{ github.event_name }}'
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com' 
```

## stackedit编辑markdown时需要追加的操作

&gt; 如何使用stacked请看[**这个**](https://kdocs.cn/l/chVIvTvyAE3O)

----------

&gt; **使用方法：**  
&gt; **1.在仓库建一个issues的文件夹（为啥叫issues，请看我的Gmeek的惨痛经历）**  
&gt; **2.GitHub的workflow将会监控issues文件夹**  
&gt; **3.workflow把issues文件夹提交的md文件先做一些操作然后放到source/_posts中**  
&gt; - md文件中的关键字(标题，类型，便签，置顶序号)提取置换- md文件中的图片链接下载到source/images/文件名（图片持久化，防止第三方链接丢失）

----------

&gt; 优势：  
&gt; 1. 完美和stackedit相结合  
&gt; 2. 多次调用workflow未单线程操作（来晚的workflow等待）  
&gt; 3. 和自动发布的workflow完美衔接，自动发布最终只执行一次（来早的workflow自动放弃）

源码：

```
name: 同步 Markdown 到博客

on:
  workflow_dispatch:  # 允许手动触发
  push:
    paths:
      - 'issues/*.md'  # 当issues目录中的md文件有变动时触发

# 修改并发控制，确保每个提交都能被独立处理
concurrency:
  group: sync-posts-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.event.after || github.event.before || github.sha }}
  cancel-in-progress: false  # 不取消运行中的工作流，确保所有变更都被处理

permissions:
  contents: write

jobs:
  sync-to-posts:
    # 只有仓库所有者的提交才会执行此工作流
    if: github.actor == github.repository_owner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # 确保获取足够的历史记录比较变更
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用带写权限的token

      - name: 🔍 获取本次提交变更的 issues/*.md 文件
        id: get_changed_files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # 设置Git身份
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          echo '🔍 当前 GITHUB_SHA: $GITHUB_SHA'
          
          # 获取触发此工作流的提交SHA - 保留原始值
          ORIGINAL_TRIGGER_SHA='${{ github.event.before }}'
          TRIGGER_SHA='$ORIGINAL_TRIGGER_SHA'
          
          if [[ -z '$TRIGGER_SHA' || '$TRIGGER_SHA' == '0000000000000000000000000000000000000000' ]]; then
            # 如果before为空或者是初始提交，使用HEAD~1
            TRIGGER_SHA=$(git rev-parse HEAD~1)
          fi
          echo '🔧 触发此工作流的提交 SHA: $TRIGGER_SHA'
          echo '🔧 当前提交 SHA: $GITHUB_SHA'
          
          # 从触发提交中获取变更文件
          echo '📋 获取本次触发提交中变更的文件...'
          echo '$ git diff --name-status $TRIGGER_SHA $GITHUB_SHA'
          
          # 先尝试直接获取差异
          if ! git diff --name-status $TRIGGER_SHA $GITHUB_SHA &gt; /tmp/diff_output.txt 2&gt;/tmp/diff_error.txt; then
            # 如果出错了，可能是提交SHA无效
            echo '⚠️ 使用原始SHA获取差异失败，错误信息:'
            cat /tmp/diff_error.txt
            
            # 尝试拉取最新代码解决问题
            echo '🔄 尝试拉取最新的远程仓库内容...'
            git pull --no-rebase
            
            # 再次尝试使用原始SHA
            if ! git diff --name-status $TRIGGER_SHA $GITHUB_SHA &gt; /tmp/diff_output.txt 2&gt;/tmp/diff_error.txt; then
              echo '⚠️ 拉取后使用原始SHA仍然失败，尝试使用HEAD~1作为基准'
              TRIGGER_SHA=$(git rev-parse HEAD~1)
              
              # 尝试使用HEAD~1
              if ! git diff --name-status $TRIGGER_SHA $GITHUB_SHA &gt; /tmp/diff_output.txt 2&gt;/tmp/diff_error.txt; then
                echo '⚠️ 使用HEAD~1也失败，将处理当前目录下的所有MD文件'
                # 列出当前所有的issues/*.md文件
                find issues -name '*.md' &gt; /tmp/current_md_files.txt
                if [[ -s '/tmp/current_md_files.txt' ]]; then
                  echo '📄 找到以下MD文件:'
                  cat /tmp/current_md_files.txt
                  cp /tmp/current_md_files.txt /tmp/final_md_files.txt
                  echo 'ISSUES_FILES_LIST=/tmp/final_md_files.txt' &gt;&gt; $GITHUB_ENV
                  echo 'HAS_MD_FILES=true' &gt;&gt; $GITHUB_ENV
                  # 跳过git diff
                  echo '⏩ 跳过git diff，直接处理所有MD文件'
                  exit 0
                else
                  echo '⚠️ 没有找到MD文件，将终止工作流'
                  echo 'HAS_MD_FILES=false' &gt;&gt; $GITHUB_ENV
                  exit 0
                fi
              fi
            fi
          fi
          
          # 如果成功获取差异，读取输出
          CHANGED_FILES=$(cat /tmp/diff_output.txt)
          echo '变更文件列表：'
          echo '$CHANGED_FILES'
          
          # 处理删除的文件
          echo '📋 获取删除的文件...'
          echo '$CHANGED_FILES' | grep '^D' | awk '{print $2}' | while read -r file; do
            echo '检查删除文件: $file'
            # 移除可能的引号
            file=$(echo '$file' | sed 's/^'//;s/'$//')
            # 解码转义序列，确保中文文件名能正确显示
            decoded_file=$(printf '%b' '$file')
            echo '解码后的文件路径: $decoded_file'
            
            # 安全检查文件路径
            if [[ '$decoded_file' == issues/* &amp;&amp; '$decoded_file' == *.md ]]; then
              echo '🗑️ 检测到删除的md文件: $decoded_file'
              # 获取文件名（不含扩展名）
              FILENAME=$(basename '$decoded_file' .md)
              # 检查source/_posts中是否存在对应文件
              if [[ -f 'source/_posts/${FILENAME}.md' ]]; then
                echo '🗑️ 删除source/_posts中的对应文件: ${FILENAME}.md'
                git rm -f 'source/_posts/${FILENAME}.md'
              fi
              
              # 保存到删除文件列表
              echo '$decoded_file' &gt;&gt; /tmp/deleted_md_files.txt
            fi
          done
          
          # 如果删除文件列表存在，读取它
          DELETED_MD_FILES=''
          if [[ -f '/tmp/deleted_md_files.txt' ]]; then
            DELETED_MD_FILES=$(cat /tmp/deleted_md_files.txt)
          fi
          echo '📂 删除的md文件: $DELETED_MD_FILES'
          
          # 获取本次提交中新增或修改的文件
          echo '📋 获取新增或修改的文件...'
          echo '$CHANGED_FILES' | grep -E '^[AM]' | awk '{print $2}' | while read -r file; do
            echo '检查新增/修改文件: $file'
            
            # 移除可能的引号
            file=$(echo '$file' | sed 's/^'//;s/'$//')
            # 解码转义序列，确保中文文件名能正确显示
            decoded_file=$(printf '%b' '$file')
            echo '解码后的文件路径: $decoded_file'
            
            # 安全检查文件路径
            if [[ '$decoded_file' == issues/* &amp;&amp; '$decoded_file' == *.md ]]; then
              echo '📝 检测到新增或修改的md文件: $decoded_file'
              # 保存到修改文件列表
              echo '$decoded_file' &gt;&gt; /tmp/modified_md_files.txt
            fi
          done
          
          # 如果修改文件列表存在，读取它
          MODIFIED_MD_FILES=''
          if [[ -f '/tmp/modified_md_files.txt' ]]; then
            MODIFIED_MD_FILES=$(cat /tmp/modified_md_files.txt)
          fi
          echo '📂 新增或修改的md文件: $MODIFIED_MD_FILES'
          
          # 如果没有需要处理的文件，则中止程序
          if [[ -z '$DELETED_MD_FILES' &amp;&amp; -z '$MODIFIED_MD_FILES' ]]; then
            echo '✅ 本次提交没有新增、修改或删除的md文件，中止程序'
            echo 'HAS_MD_FILES=false' &gt;&gt; $GITHUB_ENV
            exit 0
          fi
          
          # 确保source/_posts目录存在
          if [[ ! -d 'source/_posts' ]]; then
            echo '📁 创建source/_posts目录'
            mkdir -p source/_posts
          fi
          
          # 将新增或修改的md文件写入文件列表 - 确保文件真实存在
          &gt; /tmp/final_md_files.txt
          while IFS= read -r file; do
            if [[ -f '$file' ]]; then
              echo '$file' &gt;&gt; /tmp/final_md_files.txt
              echo '✅ 确认文件存在: $file'
            else
              echo '⚠️ 文件不存在，跳过: $file'
            fi
          done &lt; &lt;(echo '$MODIFIED_MD_FILES')
          
          # 检查最终文件列表是否为空
          if [[ ! -s '/tmp/final_md_files.txt' ]]; then
            echo '⚠️ 所有文件均不存在，中止程序'
            echo 'HAS_MD_FILES=false' &gt;&gt; $GITHUB_ENV
            exit 0
          fi
          
          # 设置环境变量指向文件列表
          echo 'ISSUES_FILES_LIST=/tmp/final_md_files.txt' &gt;&gt; $GITHUB_ENV
          echo 'HAS_MD_FILES=true' &gt;&gt; $GITHUB_ENV
          echo '📂 本次将处理的md文件: $(cat /tmp/final_md_files.txt)'
          
          # 确保拉取最新代码
          echo '🔄 拉取最新的远程更改...'
          git pull --no-rebase
          echo '📋 拉取后的状态:'
          git status

      - name: 🖼️ 处理MD文件中的图片链接
        id: process_images
        if: env.HAS_MD_FILES == 'true'
        run: |
          # 在文件中替换图片链接的函数，避免直接使用perl正则替换
          replace_in_file() {
            local file='$1'
            local old_text='$2'
            local new_text='$3'
            
            # 创建临时文件
            local tmp_file=$(mktemp)
            
            # 处理可能包含正则表达式特殊字符的文本
            # 将需要替换的字符串作为普通文本处理而非正则表达式
            # 先给文件添加一个唯一的分隔符，避免与内容冲突
            local delim=$(date +%s%N)
            
            # 使用 perl 代替 awk，perl 对特殊字符处理更可靠
            perl -e '
              # 从命令行获取参数
              $file = $ARGV[0];
              $old = $ARGV[1];
              $new = $ARGV[2];
              
              # 读取整个文件到变量中
              open(my $fh, '&lt;', $file) or die '无法打开文件 $file: $!';
              local $/;  # 启用整个文件读取模式
              $content = &lt;$fh&gt;;
              close($fh);
              
              # 执行文字替换（非正则表达式）
              # quotemeta 会转义所有特殊字符
              my $count = ($content =~ s/\Q$old\E/$new/g);
              
              # 输出替换后的内容
              print $content;
              
              # 报告替换次数
              warn '✅ 替换完成: 替换了 $count 处匹配项\n';
            ' '$file' '$old_text' '$new_text' &gt; '$tmp_file'
            
            # 检查perl命令是否成功执行
            if [ $? -eq 0 ]; then
              # 将临时文件内容移回原文件
              cat '$tmp_file' &gt; '$file'
              echo '✅ 替换完成: '$old_text' -&gt; '$new_text''
            else
              echo '❌ 替换失败，保留原始文件'
            fi
            
            # 清理临时文件
            rm -f '$tmp_file'
          }
          
          # 处理每个需要更新的Markdown文件
          while IFS= read -r FILE; do
            echo '🔍 处理文件：$FILE'
            
            # 获取文件名（不含扩展名）作为目录名
            FILE_BASE=$(basename '$FILE' .md)
            # 保留原始文件名，但替换不安全的字符为下划线
            FILE_DIR_NAME=$(echo '$FILE_BASE' | sed 's/[\/\?&lt;&gt;\\:\*\|':]/_/g')
            echo '👀 为文件创建图片目录: $FILE_DIR_NAME (源自: $FILE_BASE)'
            
            # 创建/清空图片目录 - 实现全量更新
            IMG_DIR='source/images/$FILE_DIR_NAME'
            if [[ -d '$IMG_DIR' ]]; then
              echo '🧹 清空现有图片目录，准备全量更新: $IMG_DIR'
              rm -rf '$IMG_DIR'/*
            fi
            
            # 确保图片目录存在
            mkdir -p '$IMG_DIR'
            
            echo '📂 此文件的图片将保存在目录: $IMG_DIR (独立于其他MD文件)'
            
            # 创建临时文件
            TMP_FILE=$(mktemp)
            echo '👀 临时文件路径: $TMP_FILE'
            
            # 复制原始文件内容到临时文件
            cp '$FILE' '$TMP_FILE'
            echo '👀 原始文件大小: $(wc -c &lt; '$FILE') 字节'
            
            # 使用正则表达式查找所有图片链接
            echo '👀 开始查找所有图片链接...'
            ALL_IMAGES=$(grep -oE '!\[[^]]*\]\([^)]+\)|!\[\]\([^)]+\)' '$FILE' || echo '')
            
            echo '👀 找到图片链接数量: $(echo '$ALL_IMAGES' | grep -c '^' || echo 0)'
            
            # 分离GitHub链接和其他链接
            GITHUB_IMAGES=$(echo '$ALL_IMAGES' | grep 'github.com\|githubusercontent.com' || echo '')
            OTHER_IMAGES=$(echo '$ALL_IMAGES' | grep -v 'github.com\|githubusercontent.com' || echo '')
            
            echo '👀 GitHub图片链接数: $(echo '$GITHUB_IMAGES' | grep -c '^' || echo 0)'
            echo '👀 其他图片链接数: $(echo '$OTHER_IMAGES' | grep -c '^' || echo 0)'
            
            # 处理已有的GitHub链接 - 下载到本地
            if [[ -n '$GITHUB_IMAGES' ]]; then
              echo '🖼️ 处理已有的GitHub图片链接...'
              
              echo '$GITHUB_IMAGES' | while read -r IMG_LINK; do
                echo '👀 处理GitHub图片链接: $IMG_LINK'
                
                # 提取链接部分
                IMG_URL=$(echo '$IMG_LINK' | grep -oE 'https://[^)]+')
                
                if [[ -n '$IMG_URL' ]]; then
                  echo '📥 下载GitHub图片: $IMG_URL'
                  
                  # 获取文件名
                  IMG_FILENAME=$(basename '$IMG_URL')
                  
                  # 创建临时图片文件
                  IMG_TMP=$(mktemp)
                  
                  # 下载图片
                  curl -L '$IMG_URL' -o '$IMG_TMP'
                  
                  if [[ -f '$IMG_TMP' &amp;&amp; -s '$IMG_TMP' ]]; then
                    # 复制到图片目录
                    cp '$IMG_TMP' '$IMG_DIR/$IMG_FILENAME'
                    echo '👀 保存GitHub图片到: $IMG_DIR/$IMG_FILENAME'
                    
                    # 创建新的相对路径链接
                    NEW_IMG_URL='/images/$FILE_DIR_NAME/$IMG_FILENAME'
                    
                    # 创建新的图片Markdown链接
                    if [[ '$IMG_LINK' =~ !\[\] ]]; then
                      NEW_IMG_LINK='![Image]($NEW_IMG_URL)'
                    else
                      ALT_TEXT=$(echo '$IMG_LINK' | sed -E 's/!\[([^]]*)\].*/\1/')
                      NEW_IMG_LINK='![$ALT_TEXT]($NEW_IMG_URL)'
                    fi
                    
                    # 替换原始链接
                    replace_in_file '$TMP_FILE' '$IMG_LINK' '$NEW_IMG_LINK'
                    echo '👀 替换图片链接: $IMG_LINK -&gt; $NEW_IMG_LINK'
                  else
                    echo '❌ GitHub图片下载失败，保留原始链接'
                  fi
                  
                  # 删除临时图片文件
                  rm -f '$IMG_TMP'
                else
                  echo '⚠️ 无法从GitHub链接提取URL: $IMG_LINK'
                fi
              done
            fi
            
            # 处理其他图片链接（外部链接、相对路径等）
            if [[ -n '$OTHER_IMAGES' ]]; then
              echo '🖼️ 处理其他图片链接...'
              
              echo '$OTHER_IMAGES' | while read -r IMG_LINK; do
                echo '👀 处理图片链接: $IMG_LINK'
                
                # 提取图片URL部分
                URL_PART=$(echo '$IMG_LINK' | sed -E 's/!\[[^]]*\]\(([^)]+)\)/\1/')
                
                # 判断链接类型
                if [[ '$URL_PART' =~ ^http[s]?:// ]]; then
                  # 类型1: 外部HTTP链接
                  echo '🌐 检测到外部HTTP链接: $URL_PART'
                  
                  # 创建临时图片文件
                  IMG_TMP=$(mktemp)
                  echo '👀 临时图片文件: $IMG_TMP'
                  
                  # 尝试下载图片，添加一些额外的HTTP头
                  echo '👀 尝试下载图片...'
                  
                  # 将URL保存到临时文件，避免命令行长度和特殊字符问题
                  URL_FILE=$(mktemp)
                  echo '$URL_PART' &gt; '$URL_FILE'
                  
                  # 使用wget替代curl，更好地处理复杂URL
                  # 添加--content-disposition允许保存文件，添加--trust-server-names接受服务器的文件名
                  wget -q -O '$IMG_TMP' --user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' \
                    --header='Accept: image/webp,image/apng,image/*,*/*;q=0.8' \
                    --header='Accept-Language: en-US,en;q=0.9' \
                    --tries=3 --timeout=30 \
                    '$(cat '$URL_FILE')' || {
                    
                    # 如果wget失败，尝试使用curl，但使用@文件语法读取URL
                    echo '⚠️ wget下载失败，尝试使用curl下载...'
                    curl -L -s -o '$IMG_TMP' \
                      -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' \
                      -H 'Accept: image/webp,image/apng,image/*,*/*;q=0.8' \
                      -H 'Accept-Language: en-US,en;q=0.9' \
                      '@$URL_FILE' || echo '❌ 下载失败: 无法下载图片'
                  }
                  
                  # 清理URL临时文件
                  rm -f '$URL_FILE'
                  
                  if [[ -f '$IMG_TMP' &amp;&amp; -s '$IMG_TMP' ]]; then
                    echo '👀 图片下载成功，文件大小: $(wc -c &lt; '$IMG_TMP') 字节'
                    
                    # 确定图片类型和扩展名
                    MIME_TYPE=$(file -b --mime-type '$IMG_TMP' || echo 'image/jpeg')
                    echo '👀 MIME类型: $MIME_TYPE'
                    
                    # 为上传的图片生成一个唯一名称
                    FILE_HASH=$(md5sum '$IMG_TMP' | cut -d ' ' -f 1)
                    FILENAME='img_${FILE_HASH:0:10}'
                    
                    case '$MIME_TYPE' in
                      image/jpeg)
                        EXT='.jpg'
                        ;;
                      image/png)
                        EXT='.png'
                        ;;
                      image/gif)
                        EXT='.gif'
                        ;;
                      image/webp)
                        EXT='.webp'
                        ;;
                      *)
                        EXT='.jpg'  # 默认扩展名
                        ;;
                    esac
                    
                    FILENAME='${FILENAME}${EXT}'
                    echo '👀 生成文件名: $FILENAME'
                    
                    # 将图片存入该文件专属的目录
                    IMAGE_PATH='$IMG_DIR/$FILENAME'
                    cp '$IMG_TMP' '$IMAGE_PATH'
                    echo '👀 复制图片到: $IMAGE_PATH'
                    
                    # 添加图片到Git
                    echo '👀 添加图片到Git...'
                    git add '$IMAGE_PATH'
                    
                    # 创建相对路径链接
                    NEW_IMG_URL='/images/$FILE_DIR_NAME/$FILENAME'
                    
                    # 创建新的图片Markdown语法
                    if [[ '$IMG_LINK' =~ !\[\] ]]; then
                      NEW_IMG_LINK='![Image]($NEW_IMG_URL)'
                    else
                      # 提取原始Alt Text
                      ALT_TEXT=$(echo '$IMG_LINK' | sed -E 's/!\[([^]]*)\].*/\1/')
                      NEW_IMG_LINK='![$ALT_TEXT]($NEW_IMG_URL)'
                    fi
                    
                    echo '👀 新的图片链接: $NEW_IMG_LINK'
                    
                    # 替换文件内容
                    replace_in_file '$TMP_FILE' '$IMG_LINK' '$NEW_IMG_LINK'
                    echo '👀 替换图片链接: $IMG_LINK -&gt; $NEW_IMG_LINK'
                    
                    echo '👀 替换后的文件大小: $(wc -c &lt; '$TMP_FILE') 字节'
                  else
                    echo '❌ 图片下载失败或文件为空，保留原始链接'
                  fi
                  
                  # 删除临时图片文件
                  rm -f '$IMG_TMP'
                  
                elif [[ '$URL_PART' =~ ^/ ]]; then
                  # 相对路径，保持原样
                  echo '🔄 检测到相对路径: $URL_PART，保持原样'
                else
                  # 其他类型链接，保持原样
                  echo '⚠️ 无法解析的链接，保持原样: $URL_PART'
                fi
              done
            else
              echo 'ℹ️ 没有找到图片链接'
            fi
            
            # 从文件中提取Hexo博客元数据
            # 默认使用文件名作为标题
            POST_TITLE=$(basename '$FILE' .md)
            CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            
            # 提取自定义元数据
            CUSTOM_TITLE=$(grep -E '^POST_TITLE:' '$FILE' | sed 's/^POST_TITLE:[[:space:]]*//' || echo '')
            CUSTOM_CATEGORIES=$(grep -E '^POST_CATEGORIES:' '$FILE' | sed 's/^POST_CATEGORIES:[[:space:]]*//' || echo '')
            CUSTOM_TAGS=$(grep -E '^POST_TAGS:' '$FILE' | sed 's/^POST_TAGS:[[:space:]]*//' || echo '')
            CUSTOM_STICKY=$(grep -E '^POST_STICKY:' '$FILE' | sed 's/^POST_STICKY:[[:space:]]*//' || echo '')
            CUSTOM_COVER=$(grep -E '^POST_COVER:' '$FILE' | sed 's/^POST_COVER:[[:space:]]*//' || echo '')
            
            # 如果没有自定义标题，使用文件名
            if [[ -z '$CUSTOM_TITLE' ]]; then
                CUSTOM_TITLE='$POST_TITLE'
            fi
            
            # 尝试从现有博客文章中提取日期信息
            EXISTING_POST_PATH='source/_posts/${POST_TITLE}.md'
            if [[ -f '$EXISTING_POST_PATH' ]]; then
                # 从现有文章提取date字段
                EXISTING_DATE=$(grep -E '^date:' '$EXISTING_POST_PATH' | sed 's/^date:[[:space:]]*//' || echo '')
                if [[ -n '$EXISTING_DATE' ]]; then
                    POST_DATE='$EXISTING_DATE'
                    echo '📅 从现有文章提取日期: $POST_DATE'
                else
                    POST_DATE='$CURRENT_TIME'
                    echo '📅 未找到现有日期，使用当前时间: $POST_DATE'
                fi
            else
                POST_DATE='$CURRENT_TIME'
                echo '📅 新文章，使用当前时间作为创建日期: $POST_DATE'
            fi
            
            # 如果没有自定义封面，且文章中有图片，随机选择一张作为封面
            if [[ -z '$CUSTOM_COVER' ]]; then
                # 查找文章中的图片文件
                IMAGE_FILES=$(find '$IMG_DIR' -type f -name '*.jpg' -o -name '*.png' -o -name '*.gif' -o -name '*.webp' 2&gt;/dev/null)
                if [[ -n '$IMAGE_FILES' ]]; then
                    # 随机选择一张图片
                    RANDOM_IMAGE=$(echo '$IMAGE_FILES' | shuf -n 1)
                    if [[ -n '$RANDOM_IMAGE' ]]; then
                        # 正确处理路径，确保格式为/images/...
                        # 移除完整路径，只保留/images/部分开始的路径
                        RANDOM_IMAGE_PATH='/images/$(basename '$(dirname '$RANDOM_IMAGE')')/$(basename '$RANDOM_IMAGE')'
                        CUSTOM_COVER='$RANDOM_IMAGE_PATH'
                        echo '🖼️ 自动选择图片作为封面: $CUSTOM_COVER'
                    fi
                fi
            fi
            
            # 清理字段值：去除首尾空格，替换中文逗号为英文逗号
            CUSTOM_TITLE=$(echo '$CUSTOM_TITLE' | xargs | sed 's/，/,/g')
            CUSTOM_CATEGORIES=$(echo '$CUSTOM_CATEGORIES' | xargs | sed 's/，/,/g')
            CUSTOM_TAGS=$(echo '$CUSTOM_TAGS' | xargs | sed 's/，/,/g')
            CUSTOM_STICKY=$(echo '$CUSTOM_STICKY' | xargs)
            CUSTOM_COVER=$(echo '$CUSTOM_COVER' | xargs)
            
            # 构建Hexo文章
            echo '---' &gt; 'source/_posts/${POST_TITLE}.md'
            echo 'title: ${CUSTOM_TITLE}' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
            echo 'date: ${POST_DATE}' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
            echo 'updated: ${CURRENT_TIME}' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
            
            # 只有在sticky有值且不为空时才添加
            if [[ -n '$CUSTOM_STICKY' &amp;&amp; '$CUSTOM_STICKY' != 'null' &amp;&amp; '$CUSTOM_STICKY' != 'undefined' ]]; then
                echo 'sticky: ${CUSTOM_STICKY}' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
            fi
            
            # 只有在cover有值且不为空时才添加
            if [[ -n '$CUSTOM_COVER' &amp;&amp; '$CUSTOM_COVER' != 'null' &amp;&amp; '$CUSTOM_COVER' != 'undefined' ]]; then
                echo 'cover: ${CUSTOM_COVER}' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
            fi
            
            # 处理分类
            if [[ -n '$CUSTOM_CATEGORIES' ]]; then
                echo 'categories:' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
                IFS=',' read -ra CATEGORY_ARRAY &lt;&lt;&lt; '$CUSTOM_CATEGORIES'
                for category in '${CATEGORY_ARRAY[@]}'; do
                    CATEGORY_TRIM=$(echo '$category' | xargs)
                    echo '  - ${CATEGORY_TRIM}' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
                done
            fi
            
            # 处理标签
            if [[ -n '$CUSTOM_TAGS' ]]; then
                echo 'tags:' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
                IFS=',' read -ra TAG_ARRAY &lt;&lt;&lt; '$CUSTOM_TAGS'
                for tag in '${TAG_ARRAY[@]}'; do
                    TAG_TRIM=$(echo '$tag' | xargs)
                    echo '  - ${TAG_TRIM}' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
                done
            fi
            
            echo '---' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
            
            # 添加文章内容（跳过元数据行）
            awk '!/^(POST_TITLE:|POST_CATEGORIES:|POST_TAGS:|POST_STICKY:|POST_COVER:)/' '$TMP_FILE' &gt;&gt; 'source/_posts/${POST_TITLE}.md'
            echo '✅ 创建博客文章: source/_posts/${POST_TITLE}.md'
            
            # 添加文章到Git
            git add 'source/_posts/${POST_TITLE}.md'
            
            # 删除临时文件
            rm -f '$TMP_FILE'
          done &lt; '${{ env.ISSUES_FILES_LIST }}'
          
          # 提交更改
          if git status --porcelain | grep -q 'source/'; then
            echo '🚀 提交博客文章更改...'
            git commit -m '📝 更新博客文章和图片资源'
            
            echo '🚀 准备推送到GitHub...'
            # 在推送前拉取最新代码
            echo '🔄 推送前再次拉取最新更改...'
            git pull --no-rebase
            
            echo '🚀 推送到GitHub...'
            git push || {
              echo '⚠️ 推送失败，尝试强制推送...'
              git push --force || echo '⚠️ 强制推送也失败，可能需要手动处理冲突'
            }
          else
            echo 'ℹ️ 没有博客文章需要更新'
          fi

      - name: 📋 总结处理结果
        run: |
          echo '✅ 所有操作完成!'
          echo '✅ issues目录中的Markdown文件已同步到source/_posts目录'
          echo '✅ 图片已处理并保存到source/images目录'
          echo '✅ 更改已提交到Git仓库' 
```

# anzhiyu主题使用

## 下载anzhiyu主题

```
git clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu
```

**注意：这个是在你的hexo的目录里面执行**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Hexo博客搭建：第一章（搭建Hexo博客和使用超绝的安知鱼主题！！！）/img_05e4d794fb.png)

**下载一些必须的插件**

```
npm install hexo-renderer-pug hexo-renderer-stylus --save
```

## 删除anzhiyu的git，否则VS会自动使用anzhiyu的git

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Hexo博客搭建：第一章（搭建Hexo博客和使用超绝的安知鱼主题！！！）/img_afd31ad638.png)

## 把anzhiyu的主题文件复制换个名字放到hexo的目录下

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Hexo博客搭建：第一章（搭建Hexo博客和使用超绝的安知鱼主题！！！）/img_44e7f6c48e.png)

## 把hexo的`_config.yml`里面设置为使用`_config.anzhiyu.yml`

&gt; 不介意的直接使用我的_config.anzhiyu.yml，里面百分之80都已经自定义完成了

----------

&gt; **我已经把我的相关内容给置换，需要的小伙伴直接把下面的内容换成自己的就可以用了**  
&gt; 博客域名：blog.xxx.com  
&gt; 博客网站名：我的博客网站名  
&gt; 博客头像：https://avatars.githubusercontent.com/u/41733240?v=4  
&gt; default_cover：这个属性里的图片需要自己添加

```
menu:
  文章:
    时间流: /archives/ || anzhiyu-icon-box-archive
    分类: /categories/ || anzhiyu-icon-shapes
    标签: /tags/ || anzhiyu-icon-tags

  友链:
    我的Gmeek博客: https://blog.xxx.com/ || anzhiyu-icon-link
    留言板: /comments/ || anzhiyu-icon-envelope

  关于:
    关于本人: /about/ || anzhiyu-icon-paper-plane
    随便逛逛: javascript:toRandomPost() || anzhiyu-icon-shoe-prints1

# nav相关配置
nav:
  enable: false
  travelling: false
  clock: false
  menu:
    - title: 网页
      item:
        - name: 博客
          link: https://blog.anheyu.com/
          icon: /img/favicon.ico

# mourn （哀悼日，指定日期网站简单变灰，不包括滚动条）
# 注意： 仅网站首页变灰，其他页面正常显示
mourn:
  enable: false
  days: [4-5, 5-12, 7-7, 9-18, 12-13]

# Code Blocks (代码相关)
# --------------------------------------

highlight_theme: mac #  darker / pale nighhighlight_copy / light / ocean / mac / mac light / false
highlight_copy: true # copy button
highlight_lang: true # show the code language
highlight_shrink: false # true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button
highlight_height_limit: 330 # unit: px
code_word_wrap: false

# copy settings
# copyright: Add the copyright information after copied content (複制的内容后面加上版权信息)
# copy: enable 复制后弹窗提示版权信息
copy:
  enable: true
  copyright:
    enable: false
    limit_count: 50

# social settings (社交图标设置)
# formal:
#   name: link || icon
social:
  Github: https://github.com/MyMaskKing || anzhiyu-icon-github
  # BiliBili: https://space.bilibili.com/372204786 || anzhiyu-icon-bilibili

# 作者卡片 状态
author_status:
  enable: true
  # 可以是任何图片，建议放表情包或者emoji图片，效果都很好，[表情包速查](https://emotion.xiaokang.me/)
  statusImg: 'https://bu.dusays.com/2023/08/24/64e6ce9c507bb.png'
  skills:
    - 🤖️ 数码科技爱好者
    - 🔍 分享与热心帮助
    - 🏠 在家办公小能手
    - 🔨 设计开发一条龙
    - 🤝 专修交互与设计
    - 🏃 脚踏实地行动派
    - 🧱 团队小组发动机
    - 💢 即将失业程序猿一枚

# search (搜索)
# see https://blog.anheyu.com/posts/c27d.html#搜索系统
# --------------------------------------

# Algolia search
algolia_search:
  enable: false
  hits:
    per_page: 6
  tags:
    # - 前端
    # - Hexo

# Docsearch
# Apply and Option Docs: see https://docsearch.algolia.com/
# Crawler Admin Console: see https://crawler.algolia.com/
# Settings: https://www.algolia.com/
docsearch:
  enable: false
  appId: # see email
  apiKey: # see email
  indexName: # see email
  option:

# Local search
local_search:
  enable: true
  preload: true
  CDN:

# Math (数学)
# --------------------------------------
# About the per_page
# if you set it to true, it will load mathjax/katex script in each page (true 表示每一页都加载js)
# if you set it to false, it will load mathjax/katex script according to your setting (add the 'mathjax: true' in page's front-matter)
# (false 需要时加载，须在使用的 Markdown Front-matter 加上 mathjax: true)

# MathJax
mathjax:
  enable: false
  per_page: false

# KaTeX
katex:
  enable: false
  per_page: false
  hide_scrollbar: true

# Image (图片设置)
# --------------------------------------

# Favicon（网站图标）
favicon: https://avatars.githubusercontent.com/u/41733240?v=4

# Avatar (头像)
avatar:
  img: https://avatars.githubusercontent.com/u/41733240?v=4
  effect: true

# Disable all banner image(是否禁用所有首页顶部图片，true为禁用，false为不禁用)
disable_top_img: false

# The banner image of home page（只禁用首页顶部图片，其他页面顶部图片仍然显示）
index_img: false

# If the banner of page not setting, it will show the top_img
default_top_img: 'background: linear-gradient(45deg, rgba(16, 30, 67, 0.7) 0%, rgba(52, 82, 255, 0.7) 30%, rgba(243, 54, 142, 0.7) 70%, rgba(255, 107, 69, 0.7) 100%), url('/img/other/background.jpg') center / cover no-repeat'

# 设置文章的默认封面，使页面更丰富
cover:
  # display the cover or not (是否显示文章封面)
  index_enable: true
  aside_enable: true
  archives_enable: true
  # the position of cover in home page (封面显示的位置)
  # left/right/both
  position: left
  # When cover is not set, the default cover is displayed (当没有设置cover时，默认的封面显示)
  default_cover:
    - /img/blog_cover/cover1.jpg
    - /img/blog_cover/cover2.jpg
    - /img/blog_cover/cover3.jpg
    - /img/blog_cover/cover4.jpg
    - /img/blog_cover/cover5.jpg
    - /img/blog_cover/cover6.jpg

# Replace Broken Images (替换无法显示的图片)
error_img:
  flink: /img/friend_404.gif
  post_page: /img/404.jpg

# A simple 404 page
error_404:
  enable: true
  subtitle: '请尝试站内搜索寻找文章'
  background: https://bu.dusays.com/2023/05/08/645907596997d.gif

post_meta:
  page: # Home Page
    date_type: created # created or updated or both 主页文章日期是创建日或者更新日或都显示
    date_format: simple # date/relative/simple 显示日期还是相对日期 或者 简单日期
    categories: true # true or false 主页是否显示分类
    tags: true # true or false 主页是否显示标籤
    label: false # true or false 显示描述性文字
  post:
    date_type: both # created or updated or both 文章页日期是创建日或者更新日或都显示
    date_format: date # date/relative 显示日期还是相对日期
    categories: true # true or false 文章页是否显示分类
    tags: true # true or false 文章页是否显示标籤
    label: true # true or false 显示描述性文字
    unread: false # true or false 文章未读功能

# 主色调相关配置
mainTone:
  enable: true # true or false 文章是否启用获取图片主色调
  mode: both # cdn/api/both cdn模式为图片url+imageAve参数获取主色调，api模式为请求API获取主色调，both模式会先请求cdn参数，无法获取的情况下将请求API获取，可以在文章内配置main_color: '#3e5658'，使用十六进制颜色，则不会请求both/cdn/api获取主色调，而是直接使用配置的颜色
  # 项目地址：https://github.com/anzhiyu-c/img2color-go
  api: https://img2color-go.vercel.app/api?img= # mode为api时可填写
  cover_change: true # 整篇文章跟随cover修改主色调

# wordcount (字数统计)
# see https://blog.anheyu.com/posts/c27d.html#字数统计
wordcount:
  enable: true
  post_wordcount: true
  min2read: true
  total_wordcount: true

# Display the article introduction on homepage
# 1: description
# 2: both (if the description exists, it will show description, or show the auto_excerpt)
# 3: auto_excerpt (default)
# false: do not show the article introduction
index_post_content:
  method: 3
  length: 500 # if you set method to 2 or 3, the length need to config

# anchor
# when you scroll in post, the URL will update according to header id.
anchor: false

# Post
# --------------------------------------

# toc (目录)
toc:
  post: true
  page: false
  number: true
  expand: true
  style_simple: false # for post

post_copyright:
  enable: true
  decode: false
  author_href:
  location: false
  license: CC BY-NC-SA 4.0
  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/
  avatarSinks: false # hover时头像下沉
  copyright_author_img_back:
  copyright_author_img_front:
  copyright_author_link: /

# Sponsor/reward
reward:
  enable: false
  QR_code:
    - img: https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/qrcode-weichat.png
      link:
      text: 微信
    - img: https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/qrcode-alipay.png
      link:
      text: 支付宝

# Post edit
# Easily browse and edit blog source code online.
post_edit: # 目前仅可选择一个平台在线编辑
  enable: false
  # github: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/
  # For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/
  github: false

  # yuque: https://www.yuque.com/user-name/repo-name/
  # 示例: https://www.yuque.com/yuque/yuque/
  # 你需要在语雀文章 Front Matter 添加参数 id 并确保其唯一性（例如 'id: yuque', 'id: 01'）
  yuque: false

# Related Articles
related_post:
  enable: true
  limit: 6 # Number of posts displayed
  date_type: created # or created or updated 文章日期显示创建日或者更新日

# figcaption (图片描述文字)
photofigcaption: false

# post_pagination (分页)
# value: 1 || 2 || 3 || 4 || false
# 1: The 'next post' will link to old post
# 2: The 'next post' will link to new post
# 3: 只有下一篇，并且只在文章滚动到评论区时显示下一篇文章(旧文章)
# 4: 只有下一篇，并且只在文章滚动到评论区时显示下一篇文章(旧文章) 显示图片cover
# false: disable pagination
post_pagination: 2

# Displays outdated notice for a post (文章过期提醒)
noticeOutdate:
  enable: true
  style: flat # style: simple/flat
  limit_day: 365 # When will it be shown
  position: top # position: top/bottom
  message_prev: It has been
  message_next: 时过境迁，这篇文章是一年前的文章了，内容可能已经过时，请谨慎参考🥰。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/Hexo-bo-ke-da-jian-%EF%BC%9A-di-yi-zhang-%EF%BC%88-da-jian-Hexo-bo-ke-he-shi-yong-chao-jue-de-an-zhi-yu-zhu-ti-%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%89.html</guid><pubDate>Thu, 24 Apr 2025 02:21:49 +0000</pubDate></item><item><title>Hexo博客搭建：QA章（Hexo博客搭建和发布上踩的坑）</title><link>https://blog.mymaskking.dpdns.org//post/Hexo-bo-ke-da-jian-%EF%BC%9AQA-zhang-%EF%BC%88Hexo-bo-ke-da-jian-he-fa-bu-shang-cai-de-keng-%EF%BC%89.html</link><description>## 博客文章设置了置顶但是没有生效？

同时使用了 **hexo-generator-index** 插件和**hexo-generator-topindex** 插件

1.  hexo-generator-index - 默认的首页生成器，使用 sticky 字段排序
2.  hexo-generator-topindex - 另一个首页生成器，使用 top 字段排序

**解决：**

```
npm uninstall hexo-generator-topindex
```

## 如何让首页不显示Top的背景图，但是博客页面显示呢？

**效果如下：**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Hexo博客搭建：QA章（Hexo博客搭建和发布上踩的坑）/img_8928346466.png)

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Hexo博客搭建：QA章（Hexo博客搭建和发布上踩的坑）/img_cc9ba96561.png)

**解决：**

```
 # Disable all banner image(是否禁用所有首页顶部图片，true为禁用，false为不禁用)
disable_top_img: false

# The banner image of home page（只禁用首页顶部图片，其他页面顶部图片仍然显示）
index_img: false

# If the banner of page not setting, it will show the top_img
default_top_img: 'background: linear-gradient(45deg, rgba(16, 30, 67, 0.7) 0%, rgba(52, 82, 255, 0.7) 30%, rgba(243, 54, 142, 0.7) 70%, rgba(255, 107, 69, 0.7) 100%), url('/img/other/background.jpg') center / cover no-repeat'
```

## 嵌入视频不生效，显示404？

如果是你用其他平台复制粘贴的，请保证你的视频嵌入代码是字符串，不要加**任何装饰。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/Hexo-bo-ke-da-jian-%EF%BC%9AQA-zhang-%EF%BC%88Hexo-bo-ke-da-jian-he-fa-bu-shang-cai-de-keng-%EF%BC%89.html</guid><pubDate>Thu, 24 Apr 2025 02:21:30 +0000</pubDate></item><item><title>流量卡揭秘，可以自用，也可以赚钱</title><link>https://blog.mymaskking.dpdns.org//post/liu-liang-qia-jie-mi-%EF%BC%8C-ke-yi-zi-yong-%EF%BC%8C-ye-ke-yi-zhuan-qian.html</link><description>
&gt; **个人使用就直接通过(**[点我跳转](https://ka.kaduoduohk.com/index?k=cVJPc2J3NGpZNVE9)**)进行选择就好，这也是****我自己购买时候用的**  
&gt; **自己赚钱(****代理商****)通过(**[**点我跳转**](https://ka.kaduoduohk.com/m/reg.php?code=QR972UOE)**)进行注册，我是在购买的时候突然发现流量卡是有挺大利润可赚的**

&lt;div class='video-container'&gt;&lt;iframe src='//player.bilibili.com/player.html?isOutside=true&amp;aid=114166908066279&amp;bvid=BV1hSQDYAEQs&amp;cid=28882438458&amp;p=1' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;style&gt;.video-container {position: relative;width: 100%;padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {position: absolute;top: 0;left: 0;width: 100%;height: 100%;}&lt;/style&gt;

⭐

上个月想换流量卡了，之前的**移动花卡1元/1G**实在不够用，就找到了相关的流量卡平台，不过鉴于**有些吹嘘的过于离谱**(流量和价格不对等)，自己筛选了一个比较**靠谱的网址**，办了个广电双百卡

**双百卡看这**：[https://ka.kaduoduohk.com/order/index?uid=cVJPc2J3NGpZNVE9&amp;pid=414](https://ka.kaduoduohk.com/order/index?uid=cVJPc2J3NGpZNVE9&amp;pid=414)（前11个月:每月19元，12月开始每月29【每月130G通话和流量】）

**其他卡的看这**：[https://ka.kaduoduohk.com/index?k=cVJPc2J3NGpZNVE9](https://ka.kaduoduohk.com/index?k=cVJPc2J3NGpZNVE9)

----------

**想做代理的看这**：[https://ka.kaduoduohk.com/m/reg.php?code=QR972UOE](https://ka.kaduoduohk.com/m/reg.php?code=QR972UOE)

分享这些私信是想赚点推广费，不过更重要的**独乐乐不如众乐乐****🤣****，****想办卡的小伙伴请先用我的链接办理，然后再去自己做代理！！！**





&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTQzMDk5MDMwMCwzNzg3MzgzMywxMzE5ND
UzOTIyXX0=
--&gt;
。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/liu-liang-qia-jie-mi-%EF%BC%8C-ke-yi-zi-yong-%EF%BC%8C-ye-ke-yi-zhuan-qian.html</guid><pubDate>Wed, 23 Apr 2025 12:53:21 +0000</pubDate></item><item><title>机场比较，极速云机场和极速机场，价格上一个天上，一个地下~</title><link>https://blog.mymaskking.dpdns.org//post/ji-chang-bi-jiao-%EF%BC%8C-ji-su-yun-ji-chang-he-ji-su-ji-chang-%EF%BC%8C-jia-ge-shang-yi-ge-tian-shang-%EF%BC%8C-yi-ge-di-xia-~.html</link><description>
&gt; **我把相关的软件和机场的链接放在这里面了，可以瞅瞅**

⭐

极速云（机场连接，下面的多个网址为了防止链接失效）

-   价格在12元**1个月**，100多一年

-   清明节8折优惠

-   自用了两年，机场没有跑路

-   110个节点，比较稳定

[https://w2.rouhe88.com/#/register?code=bzKA1AZN](https://w2.rouhe88.com/#/register?code=bzKA1AZN)

[https://w1.lypyf.com/#/register?code=bzKA1AZN](https://w1.lypyf.com/#/register?code=bzKA1AZN)

**使用文档里面有教程咋用的**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/机场比较，极速云机场和极速机场，价格上一个天上，一个地下~/img_77536e3a08.png)

**目前是有8折优惠的**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/机场比较，极速云机场和极速机场，价格上一个天上，一个地下~/img_173c6ed25c.png)

⭐极速

-   价格在12元**1年****(很便宜)**

-   关注了两年，机场没有跑路

-   59个节点，没有极速云稳定

[https://xn--mes358acgm99l.com/#/register?code=N3dYXMn7](https://xn--mes358acgm99l.com/#/register?code=N3dYXMn7)

----------

**自用结论：**

[极速机场](https://xn--mes358acgm99l.com/#/register?code=N3dYXMn7)是挺便宜的，**12一年**，但是只有**50个左右的节点，网上很差**

[极速云机场](https://w2.rouhe88.com/#/register?code=bzKA1AZN)，两年前60买了两年，现在**12一月**，而且有倍速的说法，意思【8倍速】就是我用1G=流量计算成8G

**推荐：还是**[**极速云**](https://w2.rouhe88.com/#/register?code=bzKA1AZN)**，毕竟也不是太贵，**

----------

**我自用的软件**

注:建议和我使用一样的软件，有一些软件可能比较旧，没那么好用

**安卓：**[https://wwvj.lanzoum.com/ighkI2tbs23g](https://wwvj.lanzoum.com/ighkI2tbs23g)密码:i3sg

**PC电脑：**[https://wwvj.lanzoum.com/iSayl2tbsxqf](https://wwvj.lanzoum.com/iSayl2tbsxqf)密码:h4yu

----------

**自用软件的使用教程**

**PC电脑**

第一步：点击仪表盘页面的**'一键订阅'**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/机场比较，极速云机场和极速机场，价格上一个天上，一个地下~/img_80f3a3d28a.png)

第二步：点击自用软件里面的订阅**，把url粘贴进去导入就可以了**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/机场比较，极速云机场和极速机场，价格上一个天上，一个地下~/img_89aa74d131.png)

第三步：点击自用软件里面的首页**，选择网络设置：系统代理和代理模式：规则**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/机场比较，极速云机场和极速机场，价格上一个天上，一个地下~/img_3ccdc017bc.png)

**安卓：**

第一步：点击仪表盘页面的**'一键订阅'（参考PC的获取方式）**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/机场比较，极速云机场和极速机场，价格上一个天上，一个地下~/img_f341f28dc0.jpg)

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/机场比较，极速云机场和极速机场，价格上一个天上，一个地下~/img_2905464d70.jpg)

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/机场比较，极速云机场和极速机场，价格上一个天上，一个地下~/img_fe2f3f85f1.jpg)





&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbLTQxNzYxNTQxNSwxMTM2NjA4ODMxXX0=
--&gt;
。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/ji-chang-bi-jiao-%EF%BC%8C-ji-su-yun-ji-chang-he-ji-su-ji-chang-%EF%BC%8C-jia-ge-shang-yi-ge-tian-shang-%EF%BC%8C-yi-ge-di-xia-~.html</guid><pubDate>Wed, 23 Apr 2025 12:53:17 +0000</pubDate></item><item><title>20250423，最新的Cursor白嫖教程！！！</title><link>https://blog.mymaskking.dpdns.org//post/20250423%EF%BC%8C-zui-xin-de-Cursor-bai-piao-jiao-cheng-%EF%BC%81%EF%BC%81%EF%BC%81.html</link><description>
## 重要提示

⭐

**2025/04/23（最新更新）**

**目前****2529无限邮箱****是可以用的，请继续参照下方的**[**无限邮箱白嫖cursor**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=iDBAMgsEVF)

## 注册用的无限邮箱

⭐

地址：[https://www.2925.com/#/](https://www.2925.com/#/)

使用方法：[abcd@2925.com](mailto:abcd@2925.com)

注册cursor可以使用：[abcd_1@2925.com](mailto:abcd_1@2925.com)

## cursor下载

⭐

链接：[https://pan.quark.cn/s/f9facfe1881d](https://pan.quark.cn/s/f9facfe1881d)

官方下载地址：[https://www.cursor.com/cn/downloads](https://www.cursor.com/cn/downloads)

## cursor试用期及MAC地址等相关问题

⭐

下面为更改PC的MAC地址，详细内容参考：[https://github.com/yuaotian/go-cursor-help](https://github.com/yuaotian/go-cursor-help)

```
irm https://aizaozao.com/accelerate.php/https://raw.githubusercontent.com/yuaotian/go-cursor-help/refs/heads/master/scripts/run/cursor_win_id_modifier.ps1 | iex
```

## 其他

⭐

[**cursor听不懂你的话，或者乱改你的代码，点我添加cursor rule试试吧！**](https://kdocs.cn/l/cjl7T7LPcMWT)

### 解决日志（已不能使用的方式）

#### 2025/04/19

⭐

目前解决方案，使用**临时邮箱**[**https://temp-mail.org/zh**](https://temp-mail.org/zh)**（注意每次打开都要使用隐私模式）**

**2025/03/19**

1.  **最新的办法**，使用**Telegram**上面的**MeMailerBot**可以获取临时邮箱（测试了两个可以使用）

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/20250423，最新的Cursor白嫖教程！！！/img_d98a4a2ba7.png)

其他办法，否则使用**字节的Trae**代替

-   就是使用正常的邮箱：谷歌，微软，163等等

1.  **第二个办法：**B站一位小伙伴提到的注册机方式

-   Git地址：[https://github.com/yeongpin/cursor-free-vip.git](https://github.com/yeongpin/cursor-free-vip.git)

-   **先关闭cursor**，然后**powershell管理员**执行(一键复制在下面的Shell代码框)

`irm` [`https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.ps1`](https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.ps1) `| iex`

```
irm https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.ps1 | iex
```

#### 2025/03/17

⭐

**临时邮箱如果不行请****打开隐私模式获取新的邮箱，多试几个邮箱****，如果还不行****请按下面步骤处理**

1.  重装最新版cursor

1.  执行下方的mac地址命令（power shell管理员执行，）

1.  使用提供的临时邮箱地址多试几个新的邮箱（一般能解决**“****unauthorized request****”**）

1.  最终方法：重启电脑看是否解决

2025/03/16

1.  发现google无限邮箱会自动**使用真实的邮箱**，此方案不行

1.  **并且每个账号只有50次免费机会**

**目前2925邮箱注册的用户无法使用cursor，会出现****“****unauthorized request****”错误。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/20250423%EF%BC%8C-zui-xin-de-Cursor-bai-piao-jiao-cheng-%EF%BC%81%EF%BC%81%EF%BC%81.html</guid><pubDate>Wed, 23 Apr 2025 11:52:33 +0000</pubDate></item><item><title>Cursor开发Rule让你的cursor变得更聪明！</title><link>https://blog.mymaskking.dpdns.org//post/Cursor-kai-fa-Rule-rang-ni-de-cursor-bian-de-geng-cong-ming-%EF%BC%81.html</link><description># Cursor的Rule（中文版）

```
    # 代码规约
    - 对于重复代码要进行共通化处理
    - 代码要合理使用代码拆分，采用引用的方式，保证每个代码文件的行数不允许超过600行
    - 删除代码时，要确认代码没有使用后才能删除
    - 添加代码时，要确认你的代码不会对其他代码产生影响
    - 添加新功能时，要确认代码中没有相关功能代码的存在，不允许重复代码
    - 添加画面CSS样式的时候，要确保你添加的CSS不对对全局CSS产生影响
    - 重新代码的时候，要确保新代码和原来的代码的功能，画面样式一致
    - 保证代码的设计和design.md的设计一致
    # 解决问题策略
    - 当出现问题的时候，你要检索整个workspace来解决这个问题，要以整个项目的角度来看
    - 当问题超过两次没有解决时，你要换一个思路来解决问题，启动二重思考
    - 当出现问题，你要通过更多的日志来确定问题发生的原因
    - 每次对话结束，你都要报告新功能或者问题解决当前的进度，如果有推荐做的功能优化，要进行报告确认，不允许自己擅自做出其他优化
```

&gt; **豆包翻译工具：**[**点我**](https://www.doubao.com/chat/2030542583498754)

# Cursor的Rule（英文版）

```
# Code Specifications
- Duplicate code should be made common.
- The number of lines in each code file is not allowed to exceed 600.
- Before deleting code, confirm that it is not in use.
- When adding code, ensure that your code will not impact other code.
- When adding new features, confirm that there is no relevant functional code present in the code. Duplicate code is not permitted.
- When adding CSS styles for the screen, make sure that the CSS you add does not affect the global CSS.
- When recoding, ensure that the new code has the same functionality and screen style as the original code.
- Ensure that the code design is consistent with the design in design.md.

# Problem - Solving Strategies
- When a problem occurs, you should search the entire workspace to solve it, taking an overall view of the project.
- When a problem remains unsolved after more than two attempts, you should approach it from a different perspective and initiate a second - level of thinking.
- When a problem occurs, you should use more logs to determine the cause of the problem.
```

# 使用方法

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Cursor开发Rule让你的cursor变得更聪明！/img_1b9b6f6e1b.png)





&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTY4Nzc4ODQ1N119
--&gt;
。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/Cursor-kai-fa-Rule-rang-ni-de-cursor-bian-de-geng-cong-ming-%EF%BC%81.html</guid><pubDate>Wed, 23 Apr 2025 11:24:01 +0000</pubDate></item><item><title>windows11的语音识别和Edge卡顿问题</title><link>https://blog.mymaskking.dpdns.org//post/windows11-de-yu-yin-shi-bie-he-Edge-qia-dun-wen-ti.html</link><description>## ✅ 解决步骤：彻底解除语音输入被自动关闭的问题

### 🔧 步骤 1：检查组策略是否禁用了语音输入相关功能⭐

1.  **Win + R**，输入：`gpedit.msc` 打开组策略编辑器。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/windows11-de-yu-yin-shi-bie-he-Edge-qia-dun-wen-ti.html</guid><pubDate>Wed, 23 Apr 2025 10:03:30 +0000</pubDate></item><item><title>AList私有云盘的部署（apk和docker）</title><link>https://blog.mymaskking.dpdns.org//post/AList-si-you-yun-pan-de-bu-shu-%EF%BC%88apk-he-docker%EF%BC%89.html</link><description>⭐⭐

**AList的docker****安装可以参考：**[**点我**](https://blog.csdn.net/2202_75326331/article/details/139613342)

docker版密码生成：

`# 随机生成一个密码`

`docker exec -it alist ./alist admin random`

``# 手动设置一个密码,`NEW_PASSWORD`是指你需要设置的密码``

`docker exec -it alist ./alist admin set NEW_PASSWORD`

----------

**AList官方的docker部署文档**：[点我](https://alist.nn.ci/zh/guide/install/docker.html#%E9%95%9C%E5%83%8F%E7%89%88%E6%9C%AC)

----------

**安卓版**参考这个[油管视频](https://www.youtube.com/watch?v=ZI539379XnY&amp;t=192s)

----------

**无意中刷到的一个**[油管视频](https://blog.nbvil.com/nat/nat-cf/)**也是做的内网穿透访问AList,用的是Docker-Compose**

```
version: '3.3'
services:
  alist:
    image: 'xhofe/alist:latest'  # 使用 latest 稳定版
    container_name: alist
    volumes:
      - './alist:/opt/alist/data'  # 文件映射到当前目录，方便管理
    ports:
      - '5244:5244'
    environment:
      - PUID=0
      - PGID=0
      - UMASK=022
    restart: unless-stopped

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=&lt;your-tunnel-token&gt;  # 提供 Token
```

```
docker-compose -f alist-compose.yml up -d
```





&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMjE0MTYxNDMzNV19
--&gt;
。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/AList-si-you-yun-pan-de-bu-shu-%EF%BC%88apk-he-docker%EF%BC%89.html</guid><pubDate>Wed, 23 Apr 2025 10:03:30 +0000</pubDate></item><item><title>Linux网络基础，教你打开新的世界~</title><link>https://blog.mymaskking.dpdns.org//post/Linux-wang-luo-ji-chu-%EF%BC%8C-jiao-ni-da-kai-xin-de-shi-jie-~.html</link><description># Wan/Lan

路由器--&gt;交换机

网络设备的架构：一对一，一对多，**多对多(星状集群)**

# 网络模型

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Linux网络基础，教你打开新的世界~/img_0a3857acb4.png)

💡

**网络层常见的协议：IP协议、ICMP协议和ARP协议等**

**ARP协议：**就是把ip地址解析为mac地址

arm -a

----------

**ICMP协议：**例（ping命令）

----------

四层协议：TCP/UPD

七层协议：Http/Https

### **数据发送**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Linux网络基础，教你打开新的世界~/img_d7f91e0dc8.png)

### **数据接收**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Linux网络基础，教你打开新的世界~/img_9359f6a767.png)

### 协议数据单元

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Linux网络基础，教你打开新的世界~/img_08c51acaa0.png)

### 设备与层的对应关系

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Linux网络基础，教你打开新的世界~/img_93864646bf.png)

# IP地址

**平常的****IP4****地址192.168.1.1，子网掩码：255.255.255.0是十进制，****IP6****是16进制**

👋

**IP类别优先看子网掩码，例：192.168.25.1/16是****B类地址**

子网掩码

A类/8（255.0.0.0）

B类/16(255.255.0.0)

C类/24(255.255.255.0)

&gt; **其中8是因为255的2进制是8个1，****下面的D，E类IP主要用于政府和医院等机构**

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Linux网络基础，教你打开新的世界~/img_f4167725c6.png)

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/Linux网络基础，教你打开新的世界~/img_6db80274cb.png)

## 私网IP段

🔔

平常的家庭网络和公司都是私有网络，公网是全球唯一的

⭐网关使用的IP一般是xx.xx.xx.1或者xx.xx.xx.254,.**255是不能使用的，只作为广播使用**

简单记法:**10-10,****172.16-172.31****,****192.168-192.168**

10.0.0.0 - 10.**255.255.255**  
172.16.0.0 - 172.31.**255.255**  
192.168.0.0 - 192.168.**255.255**

# 交换机

## 转发原理

1.  初始化
2.  各个PC的MAC地址学习

👋

交换机自主学习老化时间300s更新一次

1.  广播未知数据帧
2.  PC回应
3.  交换机实现单薄通信

## 常用命令

enable 进入管理员模式

configure terminal 进入全局配置模式

interface fastEthernet 0/1 进入端口 fastEthernet：端口类型

show mac address-table 查看各个PC的Mac地址

## vlan(虚拟局域网)

&gt; 交换机和PC之间通过默认的vlan1进行静态交互，但是**在同一台交换机内****有****不同网段****PC的情况，通过在交换机内配置****vlan名(或ID)，****根据vlan找到其他交换机的****同名vlan内****的PC设备实现通信****目的：减少交互(广播)，减少因广播带来的延迟**

### vlan种类

💡

**（****静态****）基于端口，（****动态****）基于 MAC，基于 IP**

**相关命令**

```
#管理员模式
#创建Vlan第一种方法
swich#configure terminal
Switch(config)#vlan 5
Switch(config-vlan)#name 5hhh
#创建Vlan第二种方法
swich#vlan database 
Switch(vlan)#vlan 17 name 17v
#查看Vlan
swich#show vlan brief
swich#show vlan id 5
#把端口加到vlan中
Switch(config-if)#switchport access vlan 5
Switch(config)#interface range fastEthernet 0/2-10
Switch(config-if-range)#switchport access vlan 17
#删除vlan 方法1
swich#no vlan 5
#删除vlan 方法2,database下删除
switch(vlan)#no vlan 17
```

### **trunk(交换机之间互通)**

🔔

由于n个vlan，交换机之间不**会配置n个端口**，所以通过**trunk对数据包进行标识来**实现不同网段PC在多个交换机内的通信。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/Linux-wang-luo-ji-chu-%EF%BC%8C-jiao-ni-da-kai-xin-de-shi-jie-~.html</guid><pubDate>Wed, 23 Apr 2025 09:07:54 +0000</pubDate></item><item><title>搭好Linux基础，一些知识你得知道</title><link>https://blog.mymaskking.dpdns.org//post/da-hao-Linux-ji-chu-%EF%BC%8C-yi-xie-zhi-shi-ni-de-zhi-dao.html</link><description>## 基础知识

💡

1.  ps &gt; File1时**优先执行管道符，管道符是先删除文件后再重新新建**

-   ls a.txt xxx.txt &gt;&gt; #标准输出

-   ls a.txt xxx.txt 2&gt;&gt; #异常输出

-   ls a.txt xxx.txt &amp;&gt; #标准和异常都输出

-   ls a.txt xxx.txt &gt; a.log 2&gt;&amp;1 #**2&gt;&amp;1把异常改写成标准输出**

1.  **cd - 返回进入此目录之前所在的目录**

1.  systemctl enable httpd --now **#启动服务并设置开机自启**

1.  nohup **#告诉系统即使终端关闭也不要停止这个命令**

&gt; 发展史：unix(19700101)-&gt;linux(1991)

### 云计算机

👋

Iaas 提供基础网络储存等，类似于毛胚房

Paas 可以直接进行开发测试，类似于公寓，只需要做自己想做的就好

Saas 所有软件都已经安装好，可以直接用，无需关注其他

### 系统层面

uname #查看内核名字

-   -r 显示内核版本

lscpu #查看Cpu信息

hostname #查看主机名 hostnamectl set-hostname aaa

alias 别名=真实命令 #设置临时别名

-   unalias 别名 #取消临时别名

poweroff #关机

```
/etc/shells #查看系统支持的shell解析器
/ect/rocky-release #查看系统版本（仅限rocky Linux）
```




&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMTkwNzA2MzcyOF19
--&gt;
。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/da-hao-Linux-ji-chu-%EF%BC%8C-yi-xie-zhi-shi-ni-de-zhi-dao.html</guid><pubDate>Wed, 23 Apr 2025 09:07:52 +0000</pubDate></item><item><title>万能目录，你能在这里找到所有答案！</title><link>https://blog.mymaskking.dpdns.org//post/wan-neng-mu-lu-%EF%BC%8C-ni-neng-zai-zhe-li-zhao-dao-suo-you-da-an-%EF%BC%81.html</link><description>
**😆****重要信息!!!作者不易，**[**🎵抖音**](https://v.douyin.com/UFXv95UxBbQ/)**|**[**📕小红书**](https://www.xiaohongshu.com/user/profile/678317b6000000000801c02f)**|**[**📽️B站**](https://b23.tv/rGe89DU)**|**[**📺Youtubu**](https://www.youtube.com/channel/UCeHFivb01FfFIL7kciY6KFg)**|**[**📖博客**](https://blog.mymaskking.dpdns.org/)**请点点关注点点赞啊！！！**

# 文档导航（🥰快速找到你想看的）

## 教程

### [**🔥🔥🔥CURSOR使用和下载|疑难杂症**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=lH7b8NF0ft)

### [在旧手机上搭建docker服务器，加上内网穿透就变成了云服务器，爽歪歪！](https://kdocs.cn/l/cheRD9wHnLXd)

### [**世界那么大想去看看，教你如何上☄️魔法网络！**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=QIspwDZC7w)

### [搭建📄个人博客Gmeek，原版有点难用，不过我在此基础上做了很多增强！](https://kdocs.cn/l/cuU1c4F0zYK2?linkname=v0VnkNkV9C)

### [☄️魔法上网后一些好玩的网站合集](https://kdocs.cn/l/cbFDMudDad5B)

## 副业（赚钱方式分享）

### [🔥🔥🔥流量卡自用购买|当代理商赚钱](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=Y7Syn6EUFv)

### [**🔥🔥外卖返现|当个代理赚饭钱（苍蝇腿🤣）**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=xL10iUZBCf)

### [**当up，发视频赚钱，有点难~**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=naCd2QZF8s)

## 自研软件/网站

### [抖音自动化获取粉丝|关注粉丝|粉丝互动](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=LTHjU9IoNh)

### [图文批量生产工具（PPT数据写入--&gt;切割PPT--&gt;自定义图片）](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=qqTJ0S74Zw)

# AI网站合集

⭐

1.  comfyui

[https://ai-bot.cn/](https://ai-bot.cn/)

# 🔥抖音自动化工具

[**点我回到👉文档导航**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=MTuzCk7OTP)

⭐

**大致内容（Git地址：**[**https://github.com/MyMaskKing/douyin_auto_xifen.git**](https://github.com/MyMaskKing/douyin_auto_xifen.git)**）**

-   **目前进度已完成，可以使用了**

-   **WEB上的关注和粉丝只识别抖音的（抖音火山版的不识别）**

1.  视频任务

-   第一步：执行视频评论和提取用户任务

-   第二步：执行关注视频评论者任务

1.  关注列表任务

-   第三步：执行取关任务

-   第四步：执行检查关注列表任务

1.  粉丝列表任务

-   第五步：执行检查粉丝列表任务

-   第六步：执行回关任务

-   第七步：执行粉丝私信互动任务

# 图文批量生产工具

[**点我回到👉文档导航**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=MTuzCk7OTP)

⭐

**大致内容（Git地址：**[**https://github.com/MyMaskKing/redbook_imagetext_auto.git**](https://github.com/MyMaskKing/redbook_imagetext_auto.git)**）**

1.  excel模板中导入数据

1.  把excel的数据写入ppt

1.  把ppt自动生成图片

# 🔥🔥🔥CURSOR使用和下载|疑难杂症

[**点我回到👉文档导航**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=MTuzCk7OTP)

## 重要提示

⭐

**2025/04/19（最新更新）**

**目前****2529无限邮箱****是可以用的，请继续参照下方的**[**无限邮箱白嫖cursor**](https://kdocs.cn/l/clf4xOs5a3Q1?linkname=iDBAMgsEVF)

### 解决日志（已不能使用的方式）

#### 2025/04/19

⭐

目前解决方案，使用**临时邮箱**[**https://temp-mail.org/zh**](https://temp-mail.org/zh)**（注意每次打开都要使用隐私模式）**

**2025/03/19**

1.  **最新的办法**，使用**Telegram**上面的**MeMailerBot**可以获取临时邮箱（测试了两个可以使用）

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/万能目录，你能在这里找到所有答案！/img_d98a4a2ba7.png)

其他办法，否则使用**字节的Trae**代替

-   就是使用正常的邮箱：谷歌，微软，163等等

1.  **第二个办法：**B站一位小伙伴提到的注册机方式

-   Git地址：[https://github.com/yeongpin/cursor-free-vip.git](https://github.com/yeongpin/cursor-free-vip.git)

-   **先关闭cursor**，然后**powershell管理员**执行(一键复制在下面的Shell代码框)

`irm` [`https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.ps1`](https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.ps1) `| iex`

```
irm https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.ps1 | iex
```

#### 2025/03/17

⭐

**临时邮箱如果不行请****打开隐私模式获取新的邮箱，多试几个邮箱****，如果还不行****请按下面步骤处理**

1.  重装最新版cursor

1.  执行下方的mac地址命令（power shell管理员执行，）

1.  使用提供的临时邮箱地址多试几个新的邮箱（一般能解决**“****unauthorized request****”**）

1.  最终方法：重启电脑看是否解决

2025/03/16

1.  发现google无限邮箱会自动**使用真实的邮箱**，此方案不行

1.  **并且每个账号只有50次免费机会**

**目前2925邮箱注册的用户无法使用cursor，会出现****“****unauthorized request****”错误。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/wan-neng-mu-lu-%EF%BC%8C-ni-neng-zai-zhe-li-zhao-dao-suo-you-da-an-%EF%BC%81.html</guid><pubDate>Wed, 23 Apr 2025 09:07:48 +0000</pubDate></item><item><title>手机服务器搭建：第二章（手机服务器做内网穿透）</title><link>https://blog.mymaskking.dpdns.org//post/shou-ji-fu-wu-qi-da-jian-%EF%BC%9A-di-er-zhang-%EF%BC%88-shou-ji-fu-wu-qi-zuo-nei-wang-chuan-tou-%EF%BC%89.html</link><description>## 网络穿透教程

⭐

1.  下载cloudflare的安装包

`curl -L` [`https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64`](https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64) `-o /usr/local/bin/cloudflared`

1.  赋予执行权限

`chmod +x /usr/local/bin/cloudflared`

1.  确认是否安装成功

`cloudflared version`

1.  执行

`cloudflared service install 你的密钥`

**卸载命令**：`cloudflared service uninstall`

**Docker版看这里**

**参考这个链接**：[点我](https://sspai.com/post/79278)

**docker的附加参数：**

-   --link alist:alist #容器间相互通信

-   --network host #容器内的应用就能直接访问宿主机的 localhost

`docker run --link alist:alist cloudflare/cloudflared:latest tunnel --no-autoupdate run --token 你的token`

已废弃部分

⭐

1.  下载cloudflare的ubuntu文件

`curl -L --output cloudflared.deb` [`https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb`](https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb)

注意：这里curl可能会碰到https无法下载的问题，建议把文件放到http（**AList**）下面

1.  sudo dpkg -i cloudflared.deb

注意：这里可能会报错package architecture (amd64) does not match system (arm64)

解决：sudo dpkg -i --force-architecture cloudflared.deb （[点击参考](https://github.com/kubernetes/minikube/issues/10001)）

1.  sudo cloudflared service install 你的密钥

成功会显示：`Illegal instruction`

## 网页版SSH内网穿透

⭐

1.  **将服务器连接到 Cloudflare：**

-   **创建 Cloudflare Tunnel：** 登录到 Cloudflare Zero Trust 仪表板，导航至“Networks” &gt; “Tunnels”，点击“Create a tunnel”。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/shou-ji-fu-wu-qi-da-jian-%EF%BC%9A-di-er-zhang-%EF%BC%88-shou-ji-fu-wu-qi-zuo-nei-wang-chuan-tou-%EF%BC%89.html</guid><pubDate>Wed, 23 Apr 2025 09:07:33 +0000</pubDate></item><item><title>手机服务器搭建：第一章（手机安装Alpine服务器）</title><link>https://blog.mymaskking.dpdns.org//post/shou-ji-fu-wu-qi-da-jian-%EF%BC%9A-di-yi-zhang-%EF%BC%88-shou-ji-an-zhuang-Alpine-fu-wu-qi-%EF%BC%89.html</link><description>## 安装软件介绍

⭐

**目前网上****(含ChatGPT)**给出的最优方案就是使用**Termux(**[去官网点我](https://github.com/termux/termux-app)**)+QEMU**

----------

**正在使用的方案(魔改后的Termux)：**

A：已经内置了**alpine系统的Termux(**[去官网点我](https://github.com/FakeRajbhx/alpine-term)**)(****配置过低时使用)**

原博客使用教程：[点我](https://www.cnblogs.com/yanqb/p/17367504.html)

直接查看使用教程：[点我](https://kdocs.cn/l/cheRD9wHnLXd?linkname=zvWJTuBssB)

优点：

-   内置docker，sshd，Nginx

-   apk大小为606M

-   可以在更低配置上运行(高配置手机可能无法运行)

缺点：

-   基于QEMU，每次重启都要重新设置映射端口(命令如下)

`hostfwd_add tcp::2222-:22`

B：内置了**alpine系统的Termux增强版(****🌟****优先推荐使用)**

原博客使用教程：[点我](https://blog.csdn.net/LJZxiaolongbao/article/details/139145986)

直接查看使用教程：[点我](https://www.cnblogs.com/yanqb/p/17367504.html)

直接下载APK：[点我](https://d.icdown.club/repository/main/Alpine_Termux.apk)

优点：

-   魔改了QEMU，端口映射一次设置就可以了

-   apk大小为126M

缺点：

-   没有内置docker，sshd，需要手动安装

-   无法在低配置上运行(高配置手机可以运行)

**测试的安卓配置：**

1.  `CPU：1.3GHz晓龙450八核`

1.  `4G运行内存+32G储存空间`

1.  `Android7.1.2`

----------

国外大佬使用原版**Termux**的视频（[点我](https://www.youtube.com/watch?v=xiMJpaWi5Nk)）

## A：内置了**alpine系统的Termux使用教程**

&gt; APK源和DNS更换这一步，如果**没有魔法网络**请**务必提前做了**，否则都会从国外的镜像来下载软件

### apk安装完成后左滑，在**弹出画面中选择****QEMU****，输入下面****端口映射命令(SSH连接使用)**

```
hostfwd_add tcp::2222-:22 
```

注意：正常情况输入完成回车是没有任何打印内容的

### 左滑弹出画面选择**[2]/dev/ttyS0****，等待alpine系统启动完成后****切换到root**

&gt; 登录用户 `alpine` 密码: `alpine`  
&gt; 切换到`root`账户，输入`sudo -s` 密码：`alpine`

### 修改sshd的配置文件

```
方式1：
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config
service sshd restart
```

```
#方式2：
apt install vim #可能需要安装vim
vim /etc/ssh/sshd_config
#修改下面内容为yes：
PasswordAuthentication yes
PermitRootLogin yes
#重启sshd服务
service sshd restart
```

### 设置内置Docker服务为开机自启

```
rc-update add docker
service docker start

#后台启动
setsid containerd
setsid dockerd
# 测试
docker info
```

### 修改docker的镜像源

&gt; vi /etc/docker/daemon.json  
&gt; 把下面内容复制进去

```
{
    'registry-mirrors': [
    'https://docker.1panelproxy.com',
    'https://2a6bf1988cb6428c877f723ec7530dbc.mirror.swr.myhuaweicloud.com',
    'https://docker.m.daocloud.io',
    'https://hub-mirror.c.163.com',
    'https://mirror.baidubce.com',
    'https://your_preferred_mirror',
    'https://dockerhub.icu',
    'https://docker.registry.cyou',
    'https://docker-cf.registry.cyou',
    'https://dockercf.jsdelivr.fyi',
    'https://docker.jsdelivr.fyi',
    'https://dockertest.jsdelivr.fyi',
    'https://mirror.aliyuncs.com',
    'https://dockerproxy.com',
    'https://mirror.baidubce.com',
    'https://docker.m.daocloud.io',
    'https://docker.nju.edu.cn',
    'https://docker.mirrors.sjtug.sjtu.edu.cn',
    'https://docker.mirrors.ustc.edu.cn',
    'https://mirror.iscas.ac.cn',
    'https://docker.rainbond.cc'
    ]
}
```

**检测镜像源是否被使用**

```
docker info
```

### (国内使用必须配置)APK源和DNS更换，时区修改

&gt; 更换阿里云+DNSPOD 的DNS

```
sed -i '/^#/! s/^/#/' /etc/apk/repositories
echo 'https://mirrors.aliyun.com/alpine/v3.9/main' &gt;&gt; /etc/apk/repositories
echo 'https://mirrors.aliyun.com/alpine/v3.9/community' &gt;&gt; /etc/apk/repositories

sed -i '/^#/! s/^/#/' /etc/resolv.conf
echo 'nameserver 223.5.5.5' &gt;&gt; /etc/resolv.conf
echo 'nameserver 223.6.6.6' &gt;&gt; /etc/resolv.conf

apk update
```

&gt; 时区修改

```
setup-timezone
等到提示Which timezone are you in? ('?' for list) [UTC]，然后输入
Asia/Shanghai
```

### (补充)安装Docker Compose

&gt; 1.检查最新版本号：

```
DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)
```

⭐

遇到mksh: adk: inaccessible or not found

请执行`apk update;apk add curl;apk add jq`

&gt; 2.下载并安装 Docker Compose:

```
curl -L 'https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose
```

&gt; 3.给 Docker Compose 添加执行权限并检查版本

```
chmod +x /usr/local/bin/docker-compose
docker-compose --version
```

## B：内置alpine系统的Termux增强版**使用教程**

### apk安装后会有弹出画面，点击Settings设置SSH服务端口映射

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/手机服务器搭建：第一章（手机安装Alpine服务器）/img_3b839af132.png)

```
tcp:2022:22
#端口：2022是你用XShell连接时用的
#端口：22是alpinex系统的默认端口
```

### 系统启动完成后直接输入root免密登录

&gt; APK源和DNS更换这一步，如果**没有魔法网络**请**务必提前做了**，否则都会从国外的镜像来下载软件  
&gt; [**点我**](https://kdocs.cn/l/cheRD9wHnLXd?linkname=R3mSsqR6Oa)**去看修改APK源和DNS方法**

### 安装SSH服务

```
apk update
#安装ssh
apk add openssh
#启动ssh
rc-service sshd start
# 设置开机启动
rc-update add sshd
```

&gt; 修改ssd_config的配置文件，并且设置root密码，运行root登录

```
sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config
passwd abc123456 #设置root密码
```

### 安装docker服务

```
#安装docker
apk add docker
#启动docker
service docker start
docker version
#开机自启
rc-update add docker boot
```

&gt; 修改Docker镜像源：[**点我**](https://kdocs.cn/l/cheRD9wHnLXd?linkname=hxebueOkWr)

&gt; 安装Docker Compose ：[**点我**](https://kdocs.cn/l/cheRD9wHnLXd?linkname=No8HoMRicO)

## 补充资料

### 安卓APK(linux系统)

&gt; 这是我在找**安卓**上的**linux系统apk**的时候找到的软件，下面的软件都支持linux系统，**最好用的是****userLand****，谷歌商店评分4.7。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/shou-ji-fu-wu-qi-da-jian-%EF%BC%9A-di-yi-zhang-%EF%BC%88-shou-ji-an-zhuang-Alpine-fu-wu-qi-%EF%BC%89.html</guid><pubDate>Wed, 23 Apr 2025 09:07:22 +0000</pubDate></item><item><title>关于魔法网络的书签目录</title><link>https://blog.mymaskking.dpdns.org//post/guan-yu-mo-fa-wang-luo-de-shu-qian-mu-lu.html</link><description>
# 免费域名注册

⭐

**可挂载Cloudflare**

[ggff.net](https://ggff.net/)域名：[https://customer.l53.net/](https://customer.l53.net/)

DPDNS.ORG域名：[https://dash.domain.digitalplat.org/panel/main](https://dash.domain.digitalplat.org/panel/main)

[ip-ddns.com](https://ip-ddns.com/)域名：[https://www.cloudns.net/main/dashboard/dns/](https://www.cloudns.net/main/dashboard/dns/)

**未来可挂载Cloudflare**

zone.id域名：[https://my.zone.id/subdomains](https://my.zone.id/subdomains)

**低价域名可挂载Cloudflare**

[https://www.youtube.com/watch?v=5XKcLBFBIog&amp;t=2s](https://www.youtube.com/watch?v=5XKcLBFBIog&amp;t=2s)

# 域名解析检测

## Ping查询_专业精准的IP库服务商_IPIP

&gt; [https://tools.ipip.net/ping.php](https://tools.ipip.net/ping.php)

## **域名的DNS检测**：

&gt; [https://myssl.com/dns_check.html#dns_check](https://myssl.com/dns_check.html#dns_check)

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/关于魔法网络的书签目录/img_5f5f810086.png)

## **在线Tcping(网站测试)**

&gt; [https://www.itdog.cn/tcping/hello.mymaskking.ggff.net](https://www.itdog.cn/tcping/hello.mymaskking.ggff.net)

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/关于魔法网络的书签目录/img_51ebe8f302.png)

## **虚拟信息生成器**

⭐

-   **虚拟信息生成器1：**[https://www.meiguodizhi.com/jp-address](https://www.meiguodizhi.com/jp-address)

-   **虚拟信息生成器2：**[https://www.shenfendaquan.com/](https://www.shenfendaquan.com/)

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/关于魔法网络的书签目录/img_dab73be8d7.png)

## **我的IP信息：**[https://www.ipaddress.my/?lang=zh_CN](https://www.ipaddress.my/?lang=zh_CN)

![Image](https://raw.githubusercontent.com/MyMaskKing/MyMaskKing.github.io/main/assets/images/关于魔法网络的书签目录/img_8870d3bf12.png)

# 域名解析平台

⭐

-   **cloudflare域名解析**：[https://dash.cloudflare.com/login](https://dash.cloudflare.com/login)

-   [**He.net**](https://he.net/) **DNS域名解析：**[https://ipv6.he.net/certification/login.php?redir=%2Fcertification%2Fcert-main.php](https://ipv6.he.net/certification/login.php?redir=%2Fcertification%2Fcert-main.php)

-   **华为云国际版域名解析**：[https://console-intl.huaweicloud.com/dns/?agencyId=7c10feef2ef147f6b06149e7b0e6a172&amp;region=ap-southeast-1&amp;locale=zh-cn#/dns/publiczones](https://console-intl.huaweicloud.com/dns/?agencyId=7c10feef2ef147f6b06149e7b0e6a172&amp;region=ap-southeast-1&amp;locale=zh-cn#/dns/publiczones)

# 接码平台

⭐

-   **SMS_MAN(接码平台)：**[https://sms-man.com/cn](https://sms-man.com/cn)

-   **老牌接码平台：**[https://sms-activate.org/cn#](https://sms-activate.org/cn#)

# Cloudflare节点优选

⭐

-   **CloudFlare 公共 Cname 域名：**[https://www.wetest.vip/page/cloudflare/cname.html](https://www.wetest.vip/page/cloudflare/cname.html)

-   **CloudFlare公共优选Cname域名地址1：**[点我](https://www.wetest.vip/)

-   **CloudFlare公共优选Cname域名地址2：**[点](https://www.wetest.vip/)[我](https://blog.nbvil.com/nat/saasip/)

-   **CloudFlare优质IP：**[点我](https://stock.hostmonit.com/CloudFlareYes)

# 🌟🌟🌟Google无限邮箱规则

⭐

-   **在用户名中添加点号（**`**.**`**）**

-   Gmail 会忽略用户名中的点号，因此以下地址都指向同一个邮箱：

-   [`username@gmail.com`](mailto:username@gmail.com)

-   [`user.name@gmail.com`](mailto:user.name@gmail.com)

-   [`u.s.e.r.n.a.m.e@gmail.com`](mailto:u.s.e.r.n.a.m.e@gmail.com)

-   您可以根据需要自由添加点号，邮件仍会发送到您的主邮箱。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/guan-yu-mo-fa-wang-luo-de-shu-qian-mu-lu.html</guid><pubDate>Wed, 23 Apr 2025 09:07:20 +0000</pubDate></item><item><title>手机服务器搭建：基础篇（先知道的一些内容）</title><link>https://blog.mymaskking.dpdns.org//post/shou-ji-fu-wu-qi-da-jian-%EF%BC%9A-ji-chu-pian-%EF%BC%88-xian-zhi-dao-de-yi-xie-nei-rong-%EF%BC%89.html</link><description># 先要知道的一些内容

## **手机的系统架构是什么？如何看？**

&gt; 手机的 CPU 通常使用 ARM 架构（如 ARMv7, ARMv8）或较少见的 x86 架构。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/shou-ji-fu-wu-qi-da-jian-%EF%BC%9A-ji-chu-pian-%EF%BC%88-xian-zhi-dao-de-yi-xie-nei-rong-%EF%BC%89.html</guid><pubDate>Wed, 23 Apr 2025 09:07:14 +0000</pubDate></item><item><title>Linux知识之磁盘管理</title><link>https://blog.mymaskking.dpdns.org//post/Linux-zhi-shi-zhi-ci-pan-guan-li.html</link><description>#### 磁盘管理

👋

#### **MBR(主启动记录模式)**

**最多4个主分区，1个扩展分区(无法储存数据，只能在创建逻辑分区保存数据)**

1.  先分区

fdisk /dev/sdb

-   n新建分区

-   p打印分区信息

1.  格式化分区

mkfs -t xfs /dev/sdb1

修改分区类型 mkfs.xfs -f /dev/sdb1

1.  挂载分区

mount /dev/sdb1 /data #临时修改

vi /etc/fstdb #永久修改

mount -a #读取mount(/etc/fstdb)的内容

#### **GPT分区（推荐）**

**无限分区**

1.  先分区

parted /dev/sdb

(parted)mktable gpt

(parted)mkpart

(parted)print

1.  格式化和挂载

#### 逻辑分区 （底层的空间单位为PE,默认4M）

**如果不指定PE单位的话，例如设置lv=9M，就会给3个PE=12M，浪费了3M无法使用**

**工作中通常不指定PE，lvm会自动指定PE来提高分区效率的**

vgcreate 物理卷组 /dev/sdc1

vgcreate -s 1M 物理卷组 /dev/sdc2 **#1M这个物理卷组分配单位是1M，而不是默认的4M**

vgextend 物理卷组 /dev/sdc2 **#扩容物理卷组**

vgs

pvdisplay vgdisplay lvdisplay #查看详细信息

lvcreate -L 1G -n 逻辑卷名 物理卷组

lvcreate -l 40 -n 逻辑卷名 物理卷组 **#划分40M逻辑磁盘**

mkfs.xfs /dev/ansible/nginx #格式化

lvextend -L +200M /dev/ansible/nginx

xfs_growfs /dev/ansible/nginx **#格式化扩容空间(仅适用于xfs)**

resize2fs /dev/ansible/nginx **#格式化****扩容或缩小****空间(仅适用于ext系列**

#### 逻辑分区删除

lvremove /dev/ansbile/nginx

vgremove /物理卷组

pvremove /dev/sdc1

**补充**

跨系统格式：exFAT

XFS:大量的小文件或非常大的文件，并且需要高性能和可扩展性

EXT4:需要稳定性和广泛支持的通用应用，或者需要经常调整文件系统大小的场景

lsblk -f #查看所有的磁盘信息(**已格式化的会显示磁盘类型**)

**blkid 设**

**/etc/fstdb的内容格式：**

硬盘路径(/dev/sab) 挂载点(/test) xfs 挂载选项(**defaults**) 是否备份(0) 检查文件系统的顺序(0)

----------

📌**对象存储：**非DB类的结构化(图片视频)数据存储系统**(磁盘内容访问次数收费)**，例如百度云盘WEB

**块存储：**类似于使用主机内置**硬盘**(**硬盘使用时长收费**)。</description><guid isPermaLink="true">https://blog.mymaskking.dpdns.org//post/Linux-zhi-shi-zhi-ci-pan-guan-li.html</guid><pubDate>Wed, 23 Apr 2025 09:07:05 +0000</pubDate></item></channel></rss>