name: Publish Issues

on:
  push:
    paths:
      - 'issues/*.md'

permissions:
  contents: read
  issues: write

jobs:
  issue-publisher:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: 📂 获取本次提交变更的 issues/*.md 文件
        id: get_changed_files
        run: |
          echo "🔍 当前 GITHUB_SHA: $GITHUB_SHA"

          # 输出当前提交的 diff 列表
          echo "📋 当前提交变更文件列表："
          git diff --name-only $GITHUB_SHA^ $GITHUB_SHA

          # 获取当前提交的变更文件列表，并过滤出 issues/*.md 文件
          CHANGED_FILES=$(git diff --name-only $GITHUB_SHA^ $GITHUB_SHA | grep -E '^issues/.*\.md$' || true)

          echo "📂 本次获取到的md文件：$CHANGED_FILES"

          # 如果没有文件变更，跳过后续操作
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "✅ 本次提交没有变更任何 issues/*.md 文件，跳过处理"
            exit 0
          fi

          # 输出变更文件列表到 GitHub Actions 环境变量
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 📄 处理每个变更的md文件
        id: process_files
        run: |
          # 从环境变量中获取变更的md文件列表
          CHANGED_FILES="${{ env.CHANGED_FILES }}"

          echo "📂 处理变更的md文件：$CHANGED_FILES"

          for FILE in $CHANGED_FILES; do
            echo "🔍 处理文件：$FILE"

            # 从md文件中提取标题
            TITLE=$(head -n 1 "$FILE" | sed 's/^# //')
            echo "📋 提取标题：$TITLE"

            # 从md文件中提取正文内容
            BODY=$(tail -n +2 "$FILE")
            echo "📋 提取正文：$BODY"

            # 从md文件中提取标签
            LABELS=$(grep -E '^ISSUE_LABELS:' "$FILE" | sed 's/^ISSUE_LABELS:[[:space:]]*//')
            echo "📋 提取标签：$LABELS"

            # 检查是否已有同名 issue
            ISSUE_NUMBER=$(gh issue list --state all --search "$TITLE in:title" --json number,title | jq -r ".[] | select(.title==\"$TITLE\") | .number")
            echo "🔍 检查是否已有同名 issue: '$TITLE'，找到 issue number: $ISSUE_NUMBER"

            # 如果找到 issue，则更新，否则创建新的 issue
            if [[ -n "$ISSUE_NUMBER" ]]; then
              echo "♻️ 更新已存在的 issue #$ISSUE_NUMBER"
              gh issue edit "$ISSUE_NUMBER" --body "$BODY" --label "$LABELS"
            else
              echo "🆕 创建新的 issue: $TITLE"
              gh issue create -t "$TITLE" -b "$BODY" --label "$LABELS"
            fi

            echo "✅ 完成：$TITLE"
          done