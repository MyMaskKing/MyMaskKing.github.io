name: Publish Issues

on:
  workflow_dispatch:
  push:
    paths:
      - 'issues/*.md'

permissions:
  contents: read
  issues: write

jobs:
  issue-publisher:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # 确保获取足够的历史记录比较变更

      - name: 📂 获取本次提交变更的 issues/*.md 文件
        id: get_changed_files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "🔍 当前 GITHUB_SHA: $GITHUB_SHA"

          # 获取前一次提交的SHA
          PREVIOUS_SHA=$(git rev-parse HEAD~1)
          echo "🔧 前一次提交 SHA: $PREVIOUS_SHA"

          # 处理删除的文件 - 使用单独命令获取删除的文件
          echo "📋 获取删除的文件..."
          git diff --diff-filter=D --name-only $PREVIOUS_SHA $GITHUB_SHA | while read -r file; do
            echo "检查删除文件: $file"
            # 移除可能的引号
            file=$(echo "$file" | sed 's/^"//;s/"$//')
            # 解码转义序列
            decoded_file=$(printf '%b' "$file")
            echo "解码后的文件路径: $decoded_file"
            
            if [[ "$decoded_file" == issues/* && "$decoded_file" == *.md ]]; then
              echo "🗑️ 检测到删除的md文件: $decoded_file"
              # 保存到删除文件列表
              echo "$decoded_file" >> /tmp/deleted_md_files.txt
            fi
          done
          
          # 如果删除文件列表存在，读取它
          DELETED_MD_FILES=""
          if [[ -f "/tmp/deleted_md_files.txt" ]]; then
            DELETED_MD_FILES=$(cat /tmp/deleted_md_files.txt)
          fi
          echo "📂 删除的md文件: $DELETED_MD_FILES"
          
          # 检查是否有删除操作
          DELETE_PERFORMED=false
          
          if [[ -n "$DELETED_MD_FILES" ]]; then
            # 处理每个删除的文件
            while IFS= read -r FILE; do
              echo "🔍 处理删除的文件：$FILE"
              
              # 从文件名获取标题
              FILENAME=$(basename "$FILE")
              TITLE="${FILENAME%.md}"
              echo "📋 从文件名提取标题：$TITLE"
              
              # 查找标题对应的issue
              ISSUE_NUMBER=$(gh issue list --state all --search "$TITLE in:title" --json number,title | jq -r ".[] | select(.title==\"$TITLE\") | .number")
              echo "查找issue结果: $ISSUE_NUMBER"
              
              if [[ -n "$ISSUE_NUMBER" ]]; then
                echo "🗑️ 找到对应issue #$ISSUE_NUMBER，准备关闭..."
                
                # GitHub API不支持直接删除issue，改为使用gh CLI将issue关闭(不锁定)
                echo "📌 关闭issue..."
                gh issue close "$ISSUE_NUMBER" --reason "completed" --comment "此issue对应的文件已被删除，自动关闭。"
                
                echo "✅ 已完成issue #$ISSUE_NUMBER 的处理"
                DELETE_PERFORMED=true
              else
                echo "⚠️ 未找到与'$TITLE'对应的issue，无需删除"
              fi
            done < <(echo "$DELETED_MD_FILES")
          else
            echo "✅ 没有删除任何md文件"
          fi

          # 获取本次提交中新增或修改的文件 - 使用单独命令获取新增或修改的文件
          echo "📋 获取新增或修改的文件..."
          git diff --diff-filter=AM --name-only $PREVIOUS_SHA $GITHUB_SHA | while read -r file; do
            echo "检查新增/修改文件: $file"
            # 移除可能的引号
            file=$(echo "$file" | sed 's/^"//;s/"$//')
            # 解码转义序列
            decoded_file=$(printf '%b' "$file")
            echo "解码后的文件路径: $decoded_file"
            
            if [[ "$decoded_file" == issues/* && "$decoded_file" == *.md ]]; then
              echo "📝 检测到新增或修改的md文件: $decoded_file"
              # 保存到修改文件列表
              echo "$decoded_file" >> /tmp/modified_md_files.txt
            fi
          done
          
          # 如果修改文件列表存在，读取它
          MODIFIED_MD_FILES=""
          if [[ -f "/tmp/modified_md_files.txt" ]]; then
            MODIFIED_MD_FILES=$(cat /tmp/modified_md_files.txt)
          fi
          echo "📂 新增或修改的md文件: $MODIFIED_MD_FILES"
          
          # 如果只执行了删除操作，并且没有任何新增或修改的md文件，则中止程序
          if [[ "$DELETE_PERFORMED" == "true" && -z "$MODIFIED_MD_FILES" ]]; then
            echo "✅ 已完成删除操作，没有新增或修改的md文件，中止程序"
            echo "HAS_MD_FILES=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # 如果没有需要处理的文件，则中止程序
          if [[ -z "$MODIFIED_MD_FILES" ]]; then
            echo "✅ 本次提交没有新增或修改的md文件，中止程序"
            echo "HAS_MD_FILES=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # 检查issues目录是否存在
          if [[ ! -d "issues" ]]; then
            echo "⚠️ issues目录不存在，可能已被删除"
            echo "✅ 处理完毕，退出"
            echo "HAS_MD_FILES=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # 将新增或修改的md文件写入文件列表 - 确保文件真实存在
          > /tmp/final_md_files.txt
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              echo "$file" >> /tmp/final_md_files.txt
              echo "✅ 确认文件存在: $file"
            else
              echo "⚠️ 文件不存在，跳过: $file"
            fi
          done < <(echo "$MODIFIED_MD_FILES")
          
          # 检查最终文件列表是否为空
          if [[ ! -s "/tmp/final_md_files.txt" ]]; then
            echo "⚠️ 所有文件均不存在，中止程序"
            echo "HAS_MD_FILES=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # 设置环境变量指向文件列表
          echo "ISSUES_FILES_LIST=/tmp/final_md_files.txt" >> $GITHUB_ENV
          echo "HAS_MD_FILES=true" >> $GITHUB_ENV
          echo "📂 本次将处理的md文件: $(cat /tmp/final_md_files.txt)"

      # 新增：处理Markdown文件中的图片链接
      - name: 🖼️ 处理MD文件中的图片链接
        id: process_images
        if: env.HAS_MD_FILES == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # 安装必要的工具
          echo "📌 安装所需工具..."
          sudo apt-get update && sudo apt-get install -y curl jq

          # 检查环境变量
          echo "👀 检查环境变量:"
          echo "  GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "  GITHUB_TOKEN (长度): ${#GH_TOKEN}"
          echo "  GITHUB_SHA: $GITHUB_SHA"
          
          # 验证GitHub CLI是否可用
          echo "👀 验证GitHub CLI:"
          gh --version
          
          # 测试GitHub CLI权限
          echo "👀 测试GitHub CLI权限:"
          gh api /user || echo "⚠️ API调用失败"

          # 读取文件列表
          if [[ ! -f "${{ env.ISSUES_FILES_LIST }}" ]]; then
            echo "❌ 文件列表不存在，跳过处理"
            exit 0
          fi
          
          # 处理每个Markdown文件
          while IFS= read -r FILE; do
            echo "🔍 处理文件中的图片链接：$FILE"
            
            # 创建临时文件
            TMP_FILE=$(mktemp)
            echo "👀 临时文件路径: $TMP_FILE"
            
            # 复制原始文件内容到临时文件
            cp "$FILE" "$TMP_FILE"
            echo "👀 原始文件大小: $(wc -c < "$FILE") 字节"
            
            # 使用正则表达式查找所有图片链接 - 支持多种格式的图片链接
            # 注意: 这里我们排除已经是GitHub链接的图片
            echo "👀 开始查找图片链接..."
            IMAGE_LINKS=$(grep -oE '!\[[^]]*\]\([^)]+\)|!\[\]\([^)]+\)' "$FILE" | grep -v 'github.com/user-attachments' || echo "")
            
            echo "👀 找到图片链接数量: $(echo "$IMAGE_LINKS" | grep -c '^' || echo 0)"
            echo "👀 图片链接详情:"
            echo "$IMAGE_LINKS" | nl || echo "无图片链接"
            
            if [[ -n "$IMAGE_LINKS" ]]; then
              echo "🖼️ 发现图片链接，开始处理..."
              
              # 依次处理每个图片链接
              echo "$IMAGE_LINKS" | while read -r IMG_LINK; do
                echo "👀 处理图片链接: $IMG_LINK"
                
                # 提取图片URL
                IMG_URL=$(echo "$IMG_LINK" | grep -oE 'http[^)]+' || echo "")
                
                if [[ -n "$IMG_URL" ]]; then
                  echo "📥 下载图片: $IMG_URL"
                  
                  # 创建临时图片文件
                  IMG_TMP=$(mktemp)
                  echo "👀 临时图片文件: $IMG_TMP"
                  
                  # 下载图片到临时文件
                  echo "👀 开始下载图片..."
                  curl -v -L "$IMG_URL" -o "$IMG_TMP" 2>&1 | grep -E "^>" || echo "curl详细输出获取失败"
                  
                  if [[ -f "$IMG_TMP" && -s "$IMG_TMP" ]]; then
                    echo "👀 图片下载成功，文件大小: $(wc -c < "$IMG_TMP") 字节"
                    echo "👀 查看图片类型..."
                    file "$IMG_TMP"
                    
                    # 确定图片类型和扩展名
                    MIME_TYPE=$(file -b --mime-type "$IMG_TMP" || echo "image/jpeg")
                    echo "👀 MIME类型: $MIME_TYPE"
                    
                    case "$MIME_TYPE" in
                      image/jpeg)
                        EXT=".jpg"
                        ;;
                      image/png)
                        EXT=".png"
                        ;;
                      image/gif)
                        EXT=".gif"
                        ;;
                      image/webp)
                        EXT=".webp"
                        ;;
                      *)
                        EXT=".jpg"  # 默认扩展名
                        ;;
                    esac
                    
                    FILENAME="image_$(date +%s%N)$EXT"
                    echo "👀 生成文件名: $FILENAME"
                    
                    echo "📤 上传图片到GitHub..."
                    echo "👀 开始API调用，上传图片..."
                    
                    # 显示可用的GitHub API操作
                    echo "👀 显示repos API可用操作:"
                    gh api --method GET /repos | jq -r 'keys[]' || echo "无法获取API信息"
                    
                    # 使用gh issue create而不是直接API调用
                    echo "👀 创建临时issue上传图片..."
                    TEMP_ISSUE_TITLE="TempImageUpload-$(date +%s)"
                    TEMP_ISSUE=$(gh issue create -t "$TEMP_ISSUE_TITLE" -b "Temporary issue for image uploads" --repo "$GITHUB_REPOSITORY" || echo "")
                    
                    if [[ -n "$TEMP_ISSUE" ]]; then
                      echo "👀 临时issue创建成功: $TEMP_ISSUE"
                      TEMP_ISSUE_NUMBER=$(echo "$TEMP_ISSUE" | grep -oE '#[0-9]+' | tr -d '#' || echo "")
                      
                      if [[ -n "$TEMP_ISSUE_NUMBER" ]]; then
                        echo "👀 临时issue号: $TEMP_ISSUE_NUMBER"
                        
                        # 上传图片作为issue评论
                        echo "👀 上传图片作为issue评论..."
                        COMMENT_URL=$(gh issue comment "$TEMP_ISSUE_NUMBER" --body "Image upload" --body-file "$IMG_TMP" || echo "")
                        
                        if [[ -n "$COMMENT_URL" ]]; then
                          echo "👀 评论添加成功: $COMMENT_URL"
                          
                          # 获取评论ID
                          COMMENT_ID=$(echo "$COMMENT_URL" | grep -oE 'issuecomment-[0-9]+' | grep -oE '[0-9]+' || echo "")
                          
                          if [[ -n "$COMMENT_ID" ]]; then
                            echo "👀 评论ID: $COMMENT_ID"
                            
                            # 获取评论内容中的图片URL
                            echo "👀 获取评论内容..."
                            COMMENT_JSON=$(gh api --method GET "/repos/$GITHUB_REPOSITORY/issues/comments/$COMMENT_ID" || echo "{}")
                            echo "👀 评论JSON: $COMMENT_JSON"
                            
                            COMMENT_BODY=$(echo "$COMMENT_JSON" | jq -r '.body' || echo "")
                            echo "👀 评论内容: $COMMENT_BODY"
                            
                            GITHUB_IMG_URL=$(echo "$COMMENT_BODY" | grep -oE 'https://github.com/[^/]+/[^/]+/assets/[^ )"]+' || echo "")
                            
                            if [[ -n "$GITHUB_IMG_URL" ]]; then
                              echo "✅ 图片上传成功: $GITHUB_IMG_URL"
                              
                              # 创建新的图片Markdown语法
                              if [[ "$IMG_LINK" =~ !\[\] ]]; then
                                NEW_IMG_LINK="![Image]($GITHUB_IMG_URL)"
                              else
                                # 提取原始Alt Text
                                ALT_TEXT=$(echo "$IMG_LINK" | sed -E 's/!\[([^]]*)\].*/\1/')
                                NEW_IMG_LINK="![$ALT_TEXT]($GITHUB_IMG_URL)"
                              fi
                              
                              echo "👀 新的图片链接: $NEW_IMG_LINK"
                              
                              # 转义用于替换的特殊字符
                              ESCAPED_OLD_LINK=$(echo "$IMG_LINK" | sed 's/[\/&]/\\&/g')
                              ESCAPED_NEW_LINK=$(echo "$NEW_IMG_LINK" | sed 's/[\/&]/\\&/g')
                              
                              echo "👀 原始链接(转义后): $ESCAPED_OLD_LINK"
                              echo "👀 新链接(转义后): $ESCAPED_NEW_LINK"
                              
                              # 替换临时文件中的图片链接，使用|作为分隔符避免/符号问题
                              echo "👀 执行替换..."
                              sed -i "s|$ESCAPED_OLD_LINK|$ESCAPED_NEW_LINK|g" "$TMP_FILE"
                              
                              echo "👀 替换后的文件大小: $(wc -c < "$TMP_FILE") 字节"
                              
                              echo "🔄 替换图片链接完成"
                            else
                              echo "❌ 无法从评论中提取图片URL"
                              echo "👀 评论内容中没有找到图片URL"
                            fi
                          else
                            echo "❌ 无法获取评论ID"
                          fi
                        else
                          echo "❌ 添加评论失败"
                        fi
                        
                        # 关闭临时issue
                        echo "👀 关闭临时issue..."
                        gh issue close "$TEMP_ISSUE_NUMBER" --comment "Temporary issue for image upload"
                      else
                        echo "❌ 无法获取issue号"
                      fi
                    else
                      echo "❌ 创建临时issue失败"
                    fi
                    
                    # 尝试替代方案：使用API直接上传
                    if [[ -z "$GITHUB_IMG_URL" ]]; then
                      echo "👀 尝试替代上传方法..."
                      
                      echo "👀 构建multipart请求..."
                      # 使用curl直接上传到issue附件
                      TEMP_BOUNDARY="---------------------------$(date +%s)"
                      TEMP_DATA=$(mktemp)
                      
                      # 创建multipart请求
                      {
                        echo "--$TEMP_BOUNDARY"
                        echo 'Content-Disposition: form-data; name="description"'
                        echo ""
                        echo "Image upload via workflow"
                        echo "--$TEMP_BOUNDARY"
                        echo "Content-Disposition: form-data; name=\"file\"; filename=\"$FILENAME\""
                        echo "Content-Type: $MIME_TYPE"
                        echo ""
                        cat "$IMG_TMP"
                        echo ""
                        echo "--$TEMP_BOUNDARY--"
                      } > "$TEMP_DATA"
                      
                      echo "👀 发送upload请求..."
                      UPLOAD_RESPONSE=$(curl -v -X POST \
                        -H "Authorization: token $GH_TOKEN" \
                        -H "Content-Type: multipart/form-data; boundary=$TEMP_BOUNDARY" \
                        --data-binary @"$TEMP_DATA" \
                        "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/assets/upload" 2>&1)
                      
                      echo "👀 上传响应: $UPLOAD_RESPONSE"
                      
                      # 清理临时数据文件
                      rm -f "$TEMP_DATA"
                    fi
                  else
                    echo "❌ 图片下载失败或文件为空"
                    echo "👀 临时文件: $IMG_TMP"
                    if [[ -f "$IMG_TMP" ]]; then
                      echo "👀 文件存在但可能为空，大小: $(wc -c < "$IMG_TMP") 字节"
                    else
                      echo "👀 文件不存在"
                    fi
                  fi
                  
                  # 删除临时图片文件
                  rm -f "$IMG_TMP"
                else
                  echo "⚠️ 无法从链接提取URL: $IMG_LINK"
                fi
              done
              
              # 使用处理后的内容替换原始文件
              echo "👀 更新原始文件..."
              cp "$TMP_FILE" "$FILE"
              echo "👀 更新后的文件大小: $(wc -c < "$FILE") 字节"
              
              echo "✅ 图片链接处理完成: $FILE"
            else
              echo "ℹ️ 没有找到外部图片链接，无需处理"
              rm -f "$TMP_FILE"
            fi
          done < "${{ env.ISSUES_FILES_LIST }}"
          
          echo "🎉 所有文件的图片链接处理完成"

      - name: 📄 处理每个md文件
        id: process_files
        if: env.HAS_MD_FILES == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # 检查文件列表是否存在
          if [[ ! -f "${{ env.ISSUES_FILES_LIST }}" ]]; then
            echo "❌ 文件列表不存在，跳过处理"
            exit 0
          fi
          
          # 检查文件列表是否为空
          if [[ ! -s "${{ env.ISSUES_FILES_LIST }}" ]]; then
            echo "❌ 文件列表为空，跳过处理"
            exit 0
          fi
          
          echo "📂 读取md文件列表: $(cat ${{ env.ISSUES_FILES_LIST }})"
          
          # 先获取当前仓库已有的所有标签
          echo "📋 获取仓库现有标签..."
          EXISTING_LABELS=$(gh label list --json name | jq -r '.[].name')
          echo "📋 现有标签: $EXISTING_LABELS"
          
          # 遍历文件列表中的每个文件
          while IFS= read -r FILE; do
            echo "🔍 处理文件：$FILE"
            
            # 检查文件是否存在
            if [[ ! -f "$FILE" ]]; then
              echo "⚠️ 文件不存在：$FILE，跳过处理"
              continue
            fi
            
            # 从文件名获取标题（移除扩展名和路径）
            FILENAME=$(basename "$FILE")
            TITLE="${FILENAME%.md}"
            echo "📋 从文件名提取标题：$TITLE"
            
            # 从文件内容获取标签
            LABELS=$(grep -E '^ISSUE_LABELS:' "$FILE" | sed 's/^ISSUE_LABELS:[[:space:]]*//' || echo "文档")
            
            # 如果没有找到标签，使用默认标签
            if [[ -z "$LABELS" ]]; then
              LABELS="文档"
            fi
            echo "📋 提取标签：$LABELS"
            
            # 处理标签，将逗号分隔的标签转换为数组
            LABEL_ARRAY=()
            IFS=',' read -ra TEMP_ARRAY <<< "$LABELS"
            for label in "${TEMP_ARRAY[@]}"; do
              # 去除标签两端的空格
              LABEL_ARRAY+=("$(echo "$label" | xargs)")
            done
            echo "📋 解析的标签：${LABEL_ARRAY[*]}"
            
            # 确保标签在仓库中存在
            for label in "${LABEL_ARRAY[@]}"; do
              if ! echo "$EXISTING_LABELS" | grep -q "^$label$"; then
                echo "🏷️ 创建新标签: $label"
                # 创建标签，使用随机颜色
                COLORS=("fc8403" "2cbe4e" "0075ca" "d73a4a" "6f42c1" "fbca04" "b60205" "5319e7" "0e8a16" "1d76db" "c5def5" "bfdadc")
                RANDOM_COLOR=${COLORS[$((RANDOM % ${#COLORS[@]}))]}
                gh label create "$label" --color "$RANDOM_COLOR" || true
              else
                echo "🏷️ 标签已存在: $label"
              fi
            done
            
            # 从文件中提取正文内容（跳过标签行）
            # 将内容保存到临时文件，避免Shell命令注入和特殊字符问题
            grep -v '^ISSUE_LABELS:' "$FILE" > /tmp/issue_body.md
            echo "📋 提取正文内容长度：$(wc -c < /tmp/issue_body.md) 字节"

            # 检查是否已有同名 issue
            ISSUE_NUMBER=$(gh issue list --state all --search "$TITLE in:title" --json number,title,state | jq -r ".[] | select(.title==\"$TITLE\") | .number")
            
            # 如果找到 issue，则更新，否则创建新的 issue
            if [[ -n "$ISSUE_NUMBER" ]]; then
              # 获取issue状态
              ISSUE_STATE=$(gh issue view "$ISSUE_NUMBER" --json state | jq -r '.state')
              echo "🔍 检查是否已有同名 issue: '$TITLE'，找到 issue number: $ISSUE_NUMBER，状态: $ISSUE_STATE"
              
              # 如果issue是关闭状态，先重新打开
              if [[ "$ISSUE_STATE" == "CLOSED" ]]; then
                echo "🔓 重新打开已关闭的issue #$ISSUE_NUMBER"
                gh issue reopen "$ISSUE_NUMBER"
              fi
              
              echo "♻️ 更新已存在的 issue #$ISSUE_NUMBER"
              
              # 更新issue内容
              gh issue edit "$ISSUE_NUMBER" --body-file /tmp/issue_body.md
              
              # 获取issue现有标签
              CURRENT_LABELS=$(gh issue view "$ISSUE_NUMBER" --json labels | jq -r '.labels[].name')
              echo "🏷️ 现有标签: $CURRENT_LABELS"
              
              # 添加md文件中的新标签
              echo "🏷️ 添加新标签..."
              for label in "${LABEL_ARRAY[@]}"; do
                # 检查标签是否已存在于issue中
                if ! echo "$CURRENT_LABELS" | grep -q "^$label$"; then
                  echo "🏷️ 添加新标签: $label"
                  gh issue edit "$ISSUE_NUMBER" --add-label "$label"
                else
                  echo "🏷️ 标签已存在: $label"
                fi
              done
            else
              echo "🆕 创建新的 issue: $TITLE"
              
              # 创建一个临时文件包含标签参数
              LABEL_PARAMS=""
              for label in "${LABEL_ARRAY[@]}"; do
                LABEL_PARAMS+=" --label \"$label\""
              done
              
              # 使用body-file和标签创建issue
              eval "gh issue create -t \"$TITLE\" --body-file /tmp/issue_body.md $LABEL_PARAMS"
            fi

            echo "✅ 完成：$TITLE"
          done < "${{ env.ISSUES_FILES_LIST }}"