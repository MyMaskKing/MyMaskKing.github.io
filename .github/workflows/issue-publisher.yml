name: Publish Issues

on:
  push:
    paths:
      - 'issues/*.md'

permissions:
  contents: read
  issues: write

jobs:
  issue-publisher:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # 确保获取足够的历史记录比较变更

      - name: 📂 获取本次提交变更的 issues/*.md 文件
        id: get_changed_files
        run: |
          echo "🔍 当前 GITHUB_SHA: $GITHUB_SHA"

          # 获取前一次提交的SHA
          PREVIOUS_SHA=$(git rev-parse HEAD~1)
          echo "🔧 前一次提交 SHA: $PREVIOUS_SHA"

          # 输出当前提交的 diff 列表
          echo "📋 当前提交变更文件列表："
          git diff --name-only $PREVIOUS_SHA $GITHUB_SHA

          # 直接处理issues目录下所有md文件
          echo "📋 查找issues目录下的所有md文件..."
          ISSUES_FILES=$(find issues -name "*.md" -type f)
          echo "📂 找到的md文件: $ISSUES_FILES"
          
          # 如果没有找到文件，则退出
          if [[ -z "$ISSUES_FILES" ]]; then
            echo "✅ 没有找到任何issues/*.md文件，跳过处理"
            exit 0
          fi
          
          # 将找到的文件写入文件列表
          echo "$ISSUES_FILES" > /tmp/issues_files_list.txt
          
          # 设置环境变量指向文件列表
          echo "ISSUES_FILES_LIST=/tmp/issues_files_list.txt" >> $GITHUB_ENV

      - name: 📄 处理每个md文件
        id: process_files
        run: |
          # 读取包含文件列表的文件
          echo "📂 读取md文件列表"
          if [[ ! -f "${{ env.ISSUES_FILES_LIST }}" ]]; then
            echo "❌ 文件列表不存在"
            exit 1
          fi
          
          # 遍历文件列表中的每个文件
          while IFS= read -r FILE; do
            echo "🔍 处理文件：$FILE"
            
            # 检查文件是否存在
            if [[ ! -f "$FILE" ]]; then
              echo "⚠️ 文件不存在：$FILE，跳过处理"
              continue
            fi

            # 从md文件中提取标题
            TITLE=$(head -n 1 "$FILE" | sed 's/^# //')
            echo "📋 提取标题：$TITLE"

            # 从md文件中提取正文内容
            BODY=$(tail -n +2 "$FILE")
            echo "📋 提取正文：$BODY"

            # 从md文件中提取标签
            LABELS=$(grep -E '^ISSUE_LABELS:' "$FILE" | sed 's/^ISSUE_LABELS:[[:space:]]*//')
            echo "📋 提取标签：$LABELS"
            
            # 如果标签为空，使用默认标签
            if [[ -z "$LABELS" ]]; then
              LABELS="documentation"
              echo "📋 使用默认标签：$LABELS"
            fi

            # 检查是否已有同名 issue
            ISSUE_NUMBER=$(gh issue list --state all --search "$TITLE in:title" --json number,title | jq -r ".[] | select(.title==\"$TITLE\") | .number")
            echo "🔍 检查是否已有同名 issue: '$TITLE'，找到 issue number: $ISSUE_NUMBER"

            # 如果找到 issue，则更新，否则创建新的 issue
            if [[ -n "$ISSUE_NUMBER" ]]; then
              echo "♻️ 更新已存在的 issue #$ISSUE_NUMBER"
              gh issue edit "$ISSUE_NUMBER" --body "$BODY" --label "$LABELS"
            else
              echo "🆕 创建新的 issue: $TITLE"
              gh issue create -t "$TITLE" -b "$BODY" --label "$LABELS"
            fi

            echo "✅ 完成：$TITLE"
          done < "${{ env.ISSUES_FILES_LIST }}"